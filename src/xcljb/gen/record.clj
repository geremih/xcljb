;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.record
 (:require xcljb.conn-ext xcljb.gen.record-types))

(def
 -XCLJB
 {:minor-version 13,
  :major-version 1,
  :header "record",
  :extension-multiword false,
  :extension-name "Record",
  :extension-xname "RECORD"})

(def CS {:all-clients 3, :future-clients 2, :current-clients 1})

(def
 HTYPE
 {:from-client-sequence 4, :from-client-time 2, :from-server-time 1})

(clojure.core/defn
 query-version
 [conn major-version minor-version]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:major-version :minor-version]
    [major-version minor-version])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/QueryVersionRequest
   request)))

(clojure.core/defn
 create-context
 [conn
  context
  element-header
  num-client-specs
  num-ranges
  client-specs
  ranges]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context
     :element-header
     :num-client-specs
     :num-ranges
     :client-specs
     :ranges]
    [context
     element-header
     num-client-specs
     num-ranges
     client-specs
     ranges])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/CreateContextRequest
   request)))

(clojure.core/defn
 register-clients
 [conn
  context
  element-header
  num-client-specs
  num-ranges
  client-specs
  ranges]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context
     :element-header
     :num-client-specs
     :num-ranges
     :client-specs
     :ranges]
    [context
     element-header
     num-client-specs
     num-ranges
     client-specs
     ranges])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/RegisterClientsRequest
   request)))

(clojure.core/defn
 unregister-clients
 [conn context num-client-specs client-specs]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context :num-client-specs :client-specs]
    [context num-client-specs client-specs])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/UnregisterClientsRequest
   request)))

(clojure.core/defn
 get-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/GetContextRequest
   request)))

(clojure.core/defn
 enable-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/EnableContextRequest
   request)))

(clojure.core/defn
 disable-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/DisableContextRequest
   request)))

(clojure.core/defn
 free-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "RECORD"
   xcljb.gen.record-types/FreeContextRequest
   request)))

;;; Manually written.
