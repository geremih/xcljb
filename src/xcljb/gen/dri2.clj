;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.dri2
 (:require xcljb.conn-ext xcljb.gen.dri2-types))

(def
 -XCLJB
 {:minor-version 4,
  :major-version 1,
  :header "dri2",
  :extension-multiword false,
  :extension-name "DRI2",
  :extension-xname "DRI2"})

(def
 EVENT-TYPE
 {:flip-complete 3, :blit-complete 2, :exchange-complete 1})

(def DRIVER-TYPE {:vdpau 1, :dri 0})

(def
 ATTACHMENT
 {:buffer-fake-front-left 7,
  :buffer-stencil 5,
  :buffer-accum 6,
  :buffer-hiz 10,
  :buffer-back-left 1,
  :buffer-back-right 3,
  :buffer-depth-stencil 9,
  :buffer-front-left 0,
  :buffer-front-right 2,
  :buffer-fake-front-right 8,
  :buffer-depth 4})

(clojure.core/defn
 query-version
 [conn major-version minor-version]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:major-version :minor-version]
    [major-version minor-version])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/QueryVersionRequest
   request)))

(clojure.core/defn
 connect
 [conn window driver-type]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:window :driver-type] [window driver-type])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/ConnectRequest
   request)))

(clojure.core/defn
 authenticate
 [conn window magic]
 (clojure.core/let
  [request (clojure.core/zipmap [:window :magic] [window magic])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/AuthenticateRequest
   request)))

(clojure.core/defn
 create-drawable
 [conn drawable]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable] [drawable])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/CreateDrawableRequest
   request)))

(clojure.core/defn
 destroy-drawable
 [conn drawable]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable] [drawable])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/DestroyDrawableRequest
   request)))

(clojure.core/defn
 get-buffers
 [conn drawable count attachments]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :count :attachments]
    [drawable count attachments])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/GetBuffersRequest
   request)))

(clojure.core/defn
 copy-region
 [conn drawable region dest src]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :region :dest :src]
    [drawable region dest src])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/CopyRegionRequest
   request)))

(clojure.core/defn
 get-buffers-with-format
 [conn drawable count attachments]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :count :attachments]
    [drawable count attachments])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/GetBuffersWithFormatRequest
   request)))

(clojure.core/defn
 swap-buffers
 [conn
  drawable
  target-msc-hi
  target-msc-lo
  divisor-hi
  divisor-lo
  remainder-hi
  remainder-lo]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable
     :target-msc-hi
     :target-msc-lo
     :divisor-hi
     :divisor-lo
     :remainder-hi
     :remainder-lo]
    [drawable
     target-msc-hi
     target-msc-lo
     divisor-hi
     divisor-lo
     remainder-hi
     remainder-lo])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/SwapBuffersRequest
   request)))

(clojure.core/defn
 get-msc
 [conn drawable]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable] [drawable])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/GetMSCRequest
   request)))

(clojure.core/defn
 wait-msc
 [conn
  drawable
  target-msc-hi
  target-msc-lo
  divisor-hi
  divisor-lo
  remainder-hi
  remainder-lo]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable
     :target-msc-hi
     :target-msc-lo
     :divisor-hi
     :divisor-lo
     :remainder-hi
     :remainder-lo]
    [drawable
     target-msc-hi
     target-msc-lo
     divisor-hi
     divisor-lo
     remainder-hi
     remainder-lo])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/WaitMSCRequest
   request)))

(clojure.core/defn
 wait-sbc
 [conn drawable target-sbc-hi target-sbc-lo]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :target-sbc-hi :target-sbc-lo]
    [drawable target-sbc-hi target-sbc-lo])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/WaitSBCRequest
   request)))

(clojure.core/defn
 swap-interval
 [conn drawable interval]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:drawable :interval] [drawable interval])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/SwapIntervalRequest
   request)))

(clojure.core/defn
 get-param
 [conn drawable param]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable :param] [drawable param])]
  (xcljb.conn-ext/send
   conn
   "DRI2"
   xcljb.gen.dri2-types/GetParamRequest
   request)))

;;; Manually written.
