;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xv
 (:require xcljb.conn-ext xcljb.gen.xv-types))

(def
 -XCLJB
 {:minor-version 2,
  :major-version 2,
  :header "xv",
  :extension-multiword false,
  :extension-name "Xv",
  :extension-xname "XVideo"})

(def
 GRAB-PORT-STATUS
 {:bad-alloc 5,
  :bad-reply 4,
  :invalid-time 3,
  :already-grabbed 2,
  :bad-extension 1,
  :success 0})

(def SCANLINE-ORDER {:bottom-to-top 1, :top-to-bottom 0})

(def
 VIDEO-NOTIFY-REASON
 {:hard-error 4, :preempted 3, :busy 2, :stopped 1, :started 0})

(def ATTRIBUTE-FLAG {:settable 2, :gettable 1})

(def IMAGE-FORMAT-INFO-FORMAT {:planar 1, :packed 0})

(def IMAGE-FORMAT-INFO-TYPE {:yuv 1, :rgb 0})

(def
 TYPE
 {:image-mask 16,
  :still-mask 8,
  :video-mask 4,
  :output-mask 2,
  :input-mask 1})

(clojure.core/defn
 query-extension
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/QueryExtensionRequest
   request)))

(clojure.core/defn
 query-adaptors
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/QueryAdaptorsRequest
   request)))

(clojure.core/defn
 query-encodings
 [conn port]
 (clojure.core/let
  [request (clojure.core/zipmap [:port] [port])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/QueryEncodingsRequest
   request)))

(clojure.core/defn
 grab-port
 [conn port time]
 (clojure.core/let
  [request (clojure.core/zipmap [:port :time] [port time])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/GrabPortRequest
   request)))

(clojure.core/defn
 ungrab-port
 [conn port time]
 (clojure.core/let
  [request (clojure.core/zipmap [:port :time] [port time])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/UngrabPortRequest
   request)))

(clojure.core/defn
 put-video
 [conn
  port
  drawable
  gc
  vid-x
  vid-y
  vid-w
  vid-h
  drw-x
  drw-y
  drw-w
  drw-h]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port
     :drawable
     :gc
     :vid-x
     :vid-y
     :vid-w
     :vid-h
     :drw-x
     :drw-y
     :drw-w
     :drw-h]
    [port
     drawable
     gc
     vid-x
     vid-y
     vid-w
     vid-h
     drw-x
     drw-y
     drw-w
     drw-h])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/PutVideoRequest
   request)))

(clojure.core/defn
 put-still
 [conn
  port
  drawable
  gc
  vid-x
  vid-y
  vid-w
  vid-h
  drw-x
  drw-y
  drw-w
  drw-h]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port
     :drawable
     :gc
     :vid-x
     :vid-y
     :vid-w
     :vid-h
     :drw-x
     :drw-y
     :drw-w
     :drw-h]
    [port
     drawable
     gc
     vid-x
     vid-y
     vid-w
     vid-h
     drw-x
     drw-y
     drw-w
     drw-h])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/PutStillRequest
   request)))

(clojure.core/defn
 get-video
 [conn
  port
  drawable
  gc
  vid-x
  vid-y
  vid-w
  vid-h
  drw-x
  drw-y
  drw-w
  drw-h]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port
     :drawable
     :gc
     :vid-x
     :vid-y
     :vid-w
     :vid-h
     :drw-x
     :drw-y
     :drw-w
     :drw-h]
    [port
     drawable
     gc
     vid-x
     vid-y
     vid-w
     vid-h
     drw-x
     drw-y
     drw-w
     drw-h])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/GetVideoRequest
   request)))

(clojure.core/defn
 get-still
 [conn
  port
  drawable
  gc
  vid-x
  vid-y
  vid-w
  vid-h
  drw-x
  drw-y
  drw-w
  drw-h]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port
     :drawable
     :gc
     :vid-x
     :vid-y
     :vid-w
     :vid-h
     :drw-x
     :drw-y
     :drw-w
     :drw-h]
    [port
     drawable
     gc
     vid-x
     vid-y
     vid-w
     vid-h
     drw-x
     drw-y
     drw-w
     drw-h])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/GetStillRequest
   request)))

(clojure.core/defn
 stop-video
 [conn port drawable]
 (clojure.core/let
  [request (clojure.core/zipmap [:port :drawable] [port drawable])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/StopVideoRequest
   request)))

(clojure.core/defn
 select-video-notify
 [conn drawable onoff]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable :onoff] [drawable onoff])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/SelectVideoNotifyRequest
   request)))

(clojure.core/defn
 select-port-notify
 [conn port onoff]
 (clojure.core/let
  [request (clojure.core/zipmap [:port :onoff] [port onoff])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/SelectPortNotifyRequest
   request)))

(clojure.core/defn
 query-best-size
 [conn port vid-w vid-h drw-w drw-h motion]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port :vid-w :vid-h :drw-w :drw-h :motion]
    [port vid-w vid-h drw-w drw-h motion])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/QueryBestSizeRequest
   request)))

(clojure.core/defn
 set-port-attribute
 [conn port attribute value]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port :attribute :value]
    [port attribute value])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/SetPortAttributeRequest
   request)))

(clojure.core/defn
 get-port-attribute
 [conn port attribute]
 (clojure.core/let
  [request (clojure.core/zipmap [:port :attribute] [port attribute])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/GetPortAttributeRequest
   request)))

(clojure.core/defn
 query-port-attributes
 [conn port]
 (clojure.core/let
  [request (clojure.core/zipmap [:port] [port])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/QueryPortAttributesRequest
   request)))

(clojure.core/defn
 list-image-formats
 [conn port]
 (clojure.core/let
  [request (clojure.core/zipmap [:port] [port])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/ListImageFormatsRequest
   request)))

(clojure.core/defn
 query-image-attributes
 [conn port id width height]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port :id :width :height]
    [port id width height])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/QueryImageAttributesRequest
   request)))

(clojure.core/defn
 put-image
 [conn
  port
  drawable
  gc
  id
  src-x
  src-y
  src-w
  src-h
  drw-x
  drw-y
  drw-w
  drw-h
  width
  height
  data]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port
     :drawable
     :gc
     :id
     :src-x
     :src-y
     :src-w
     :src-h
     :drw-x
     :drw-y
     :drw-w
     :drw-h
     :width
     :height
     :data]
    [port
     drawable
     gc
     id
     src-x
     src-y
     src-w
     src-h
     drw-x
     drw-y
     drw-w
     drw-h
     width
     height
     data])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/PutImageRequest
   request)))

(clojure.core/defn
 shm-put-image
 [conn
  port
  drawable
  gc
  shmseg
  id
  offset
  src-x
  src-y
  src-w
  src-h
  drw-x
  drw-y
  drw-w
  drw-h
  width
  height
  send-event]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:port
     :drawable
     :gc
     :shmseg
     :id
     :offset
     :src-x
     :src-y
     :src-w
     :src-h
     :drw-x
     :drw-y
     :drw-w
     :drw-h
     :width
     :height
     :send-event]
    [port
     drawable
     gc
     shmseg
     id
     offset
     src-x
     src-y
     src-w
     src-h
     drw-x
     drw-y
     drw-w
     drw-h
     width
     height
     send-event])]
  (xcljb.conn-ext/send
   conn
   "XVideo"
   xcljb.gen.xv-types/ShmPutImageRequest
   request)))

;;; Manually written.
