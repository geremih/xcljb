;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xvmc
 (:require xcljb.conn-ext xcljb.gen.xvmc-types))

(def
 -XCLJB
 {:minor-version 1,
  :major-version 1,
  :header "xvmc",
  :extension-multiword false,
  :extension-name "XvMC",
  :extension-xname "XVideo-MotionCompensation"})

(clojure.core/defn
 query-version
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/QueryVersionRequest
   request)))

(clojure.core/defn
 list-surface-types
 [conn port-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:port-id] [port-id])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/ListSurfaceTypesRequest
   request)))

(clojure.core/defn
 create-context
 [conn context-id port-id surface-id width height flags]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-id :port-id :surface-id :width :height :flags]
    [context-id port-id surface-id width height flags])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/CreateContextRequest
   request)))

(clojure.core/defn
 destroy-context
 [conn context-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-id] [context-id])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/DestroyContextRequest
   request)))

(clojure.core/defn
 create-surface
 [conn surface-id context-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:surface-id :context-id]
    [surface-id context-id])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/CreateSurfaceRequest
   request)))

(clojure.core/defn
 destroy-surface
 [conn surface-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:surface-id] [surface-id])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/DestroySurfaceRequest
   request)))

(clojure.core/defn
 create-subpicture
 [conn subpicture-id context xvimage-id width height]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:subpicture-id :context :xvimage-id :width :height]
    [subpicture-id context xvimage-id width height])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/CreateSubpictureRequest
   request)))

(clojure.core/defn
 destroy-subpicture
 [conn subpicture-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:subpicture-id] [subpicture-id])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/DestroySubpictureRequest
   request)))

(clojure.core/defn
 list-subpicture-types
 [conn port-id surface-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:port-id :surface-id] [port-id surface-id])]
  (xcljb.conn-ext/send
   conn
   "XVideo-MotionCompensation"
   xcljb.gen.xvmc-types/ListSubpictureTypesRequest
   request)))

;;; Manually written.
