;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xinput
 (:require xcljb.conn-ext xcljb.gen.xinput-types))

(def
 -XCLJB
 {:minor-version 4,
  :major-version 1,
  :header "xinput",
  :extension-multiword false,
  :extension-name "Input",
  :extension-xname "XInputExtension"})

(def
 FEEDBACK-CLASS
 {:bell 5, :led 4, :integer 3, :string 2, :pointer 1, :keyboard 0})

(def
 DEVICE-INPUT-MODE
 {:sync-all 5,
  :async-all 4,
  :async-other-devices 3,
  :replay-this-device 2,
  :sync-this-device 1,
  :async-this-device 0})

(def
 INPUT-CLASS
 {:other 6,
  :focus 5,
  :proximity 4,
  :feedback 3,
  :valuator 2,
  :button 1,
  :key 0})

(def
 DEVICE-USE
 {:is-xextension-pointer 4,
  :is-xextension-keyboard 3,
  :is-xextension-device 2,
  :is-xkeyboard 1,
  :is-xpointer 0})

(def PROPAGATE-MODE {:delete-from-list 1, :add-to-list 0})

(def VALUATOR-MODE {:absolute 1, :relative 0})

(clojure.core/defn
 get-extension-version
 [conn name-len name]
 (clojure.core/let
  [request (clojure.core/zipmap [:name-len :name] [name-len name])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetExtensionVersionRequest
   request)))

(clojure.core/defn
 list-input-devices
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/ListInputDevicesRequest
   request)))

(clojure.core/defn
 open-device
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/OpenDeviceRequest
   request)))

(clojure.core/defn
 close-device
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/CloseDeviceRequest
   request)))

(clojure.core/defn
 set-device-mode
 [conn device-id mode]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id :mode] [device-id mode])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SetDeviceModeRequest
   request)))

(clojure.core/defn
 select-extension-event
 [conn window num-classes classes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:window :num-classes :classes]
    [window num-classes classes])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SelectExtensionEventRequest
   request)))

(clojure.core/defn
 get-selected-extension-events
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetSelectedExtensionEventsRequest
   request)))

(clojure.core/defn
 change-device-dont-propagate-list
 [conn window num-classes mode classes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:window :num-classes :mode :classes]
    [window num-classes mode classes])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/ChangeDeviceDontPropagateListRequest
   request)))

(clojure.core/defn
 get-device-dont-propagate-list
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceDontPropagateListRequest
   request)))

(clojure.core/defn
 get-device-motion-events
 [conn start stop device-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:start :stop :device-id]
    [start stop device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceMotionEventsRequest
   request)))

(clojure.core/defn
 change-keyboard-device
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/ChangeKeyboardDeviceRequest
   request)))

(clojure.core/defn
 change-pointer-device
 [conn x-axis y-axis device-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:x-axis :y-axis :device-id]
    [x-axis y-axis device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/ChangePointerDeviceRequest
   request)))

(clojure.core/defn
 grab-device
 [conn
  grab-window
  time
  num-classes
  this-device-mode
  other-device-mode
  owner-events
  device-id
  classes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:grab-window
     :time
     :num-classes
     :this-device-mode
     :other-device-mode
     :owner-events
     :device-id
     :classes]
    [grab-window
     time
     num-classes
     this-device-mode
     other-device-mode
     owner-events
     device-id
     classes])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GrabDeviceRequest
   request)))

(clojure.core/defn
 ungrab-device
 [conn time device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:time :device-id] [time device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/UngrabDeviceRequest
   request)))

(clojure.core/defn
 grab-device-key
 [conn
  grab-window
  num-classes
  modifiers
  modifier-device
  grabbed-device
  key
  this-device-mode
  other-device-mode
  owner-events
  classes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:grab-window
     :num-classes
     :modifiers
     :modifier-device
     :grabbed-device
     :key
     :this-device-mode
     :other-device-mode
     :owner-events
     :classes]
    [grab-window
     num-classes
     modifiers
     modifier-device
     grabbed-device
     key
     this-device-mode
     other-device-mode
     owner-events
     classes])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GrabDeviceKeyRequest
   request)))

(clojure.core/defn
 ungrab-device-key
 [conn grab-window modifiers modifier-device key grabbed-device]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:grab-window :modifiers :modifier-device :key :grabbed-device]
    [grab-window modifiers modifier-device key grabbed-device])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/UngrabDeviceKeyRequest
   request)))

(clojure.core/defn
 grab-device-button
 [conn
  grab-window
  grabbed-device
  modifier-device
  num-classes
  modifiers
  this-device-mode
  other-device-mode
  button
  owner-events
  classes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:grab-window
     :grabbed-device
     :modifier-device
     :num-classes
     :modifiers
     :this-device-mode
     :other-device-mode
     :button
     :owner-events
     :classes]
    [grab-window
     grabbed-device
     modifier-device
     num-classes
     modifiers
     this-device-mode
     other-device-mode
     button
     owner-events
     classes])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GrabDeviceButtonRequest
   request)))

(clojure.core/defn
 ungrab-device-button
 [conn grab-window modifiers modifier-device button grabbed-device]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:grab-window :modifiers :modifier-device :button :grabbed-device]
    [grab-window modifiers modifier-device button grabbed-device])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/UngrabDeviceButtonRequest
   request)))

(clojure.core/defn
 allow-device-events
 [conn time mode device-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:time :mode :device-id]
    [time mode device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/AllowDeviceEventsRequest
   request)))

(clojure.core/defn
 get-device-focus
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceFocusRequest
   request)))

(clojure.core/defn
 set-device-focus
 [conn focus time revert-to device-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:focus :time :revert-to :device-id]
    [focus time revert-to device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SetDeviceFocusRequest
   request)))

(clojure.core/defn
 get-feedback-control
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetFeedbackControlRequest
   request)))

(clojure.core/defn
 get-device-key-mapping
 [conn device-id first-keycode count]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:device-id :first-keycode :count]
    [device-id first-keycode count])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceKeyMappingRequest
   request)))

(clojure.core/defn
 change-device-key-mapping
 [conn
  device-id
  first-keycode
  keysyms-per-keycode
  keycode-count
  keysyms]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:device-id
     :first-keycode
     :keysyms-per-keycode
     :keycode-count
     :keysyms]
    [device-id
     first-keycode
     keysyms-per-keycode
     keycode-count
     keysyms])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/ChangeDeviceKeyMappingRequest
   request)))

(clojure.core/defn
 get-device-modifier-mapping
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceModifierMappingRequest
   request)))

(clojure.core/defn
 set-device-modifier-mapping
 [conn device-id keycodes-per-modifier keymaps]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:device-id :keycodes-per-modifier :keymaps]
    [device-id keycodes-per-modifier keymaps])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SetDeviceModifierMappingRequest
   request)))

(clojure.core/defn
 get-device-button-mapping
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceButtonMappingRequest
   request)))

(clojure.core/defn
 set-device-button-mapping
 [conn device-id map-size map]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:device-id :map-size :map]
    [device-id map-size map])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SetDeviceButtonMappingRequest
   request)))

(clojure.core/defn
 query-device-state
 [conn device-id]
 (clojure.core/let
  [request (clojure.core/zipmap [:device-id] [device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/QueryDeviceStateRequest
   request)))

(clojure.core/defn
 send-extension-event
 [conn
  destination
  device-id
  propagate
  num-classes
  num-events
  events
  classes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:destination
     :device-id
     :propagate
     :num-classes
     :num-events
     :events
     :classes]
    [destination
     device-id
     propagate
     num-classes
     num-events
     events
     classes])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SendExtensionEventRequest
   request)))

(clojure.core/defn
 device-bell
 [conn device-id feedback-id feedback-class percent]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:device-id :feedback-id :feedback-class :percent]
    [device-id feedback-id feedback-class percent])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/DeviceBellRequest
   request)))

(clojure.core/defn
 set-device-valuators
 [conn device-id first-valuator num-valuators valuators]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:device-id :first-valuator :num-valuators :valuators]
    [device-id first-valuator num-valuators valuators])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/SetDeviceValuatorsRequest
   request)))

(clojure.core/defn
 get-device-control
 [conn control-id device-id]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:control-id :device-id]
    [control-id device-id])]
  (xcljb.conn-ext/send
   conn
   "XInputExtension"
   xcljb.gen.xinput-types/GetDeviceControlRequest
   request)))

;;; Manually written.
