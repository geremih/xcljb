;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.sync
 (:require xcljb.conn-ext xcljb.gen.sync-types))

(def
 -XCLJB
 {:minor-version 1,
  :major-version 3,
  :header "sync",
  :extension-multiword false,
  :extension-name "Sync",
  :extension-xname "SYNC"})

(def
 CA
 {:events 32,
  :delta 16,
  :test-type 8,
  :value 4,
  :value-type 2,
  :counter 1})

(def VALUETYPE {:relative 1, :absolute 0})

(def
 TESTTYPE
 {:negative-comparison 3,
  :positive-comparison 2,
  :negative-transition 1,
  :positive-transition 0})

(def ALARMSTATE {:destroyed 2, :inactive 1, :active 0})

(clojure.core/defn
 initialize
 [conn desired-major-version desired-minor-version]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:desired-major-version :desired-minor-version]
    [desired-major-version desired-minor-version])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/InitializeRequest
   request)))

(clojure.core/defn
 list-system-counters
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/ListSystemCountersRequest
   request)))

(clojure.core/defn
 create-counter
 [conn id initial-value]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:id :initial-value] [id initial-value])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/CreateCounterRequest
   request)))

(clojure.core/defn
 destroy-counter
 [conn counter]
 (clojure.core/let
  [request (clojure.core/zipmap [:counter] [counter])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/DestroyCounterRequest
   request)))

(clojure.core/defn
 query-counter
 [conn counter]
 (clojure.core/let
  [request (clojure.core/zipmap [:counter] [counter])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/QueryCounterRequest
   request)))

(clojure.core/defn
 await
 [conn wait-list]
 (clojure.core/let
  [request (clojure.core/zipmap [:wait-list] [wait-list])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/AwaitRequest
   request)))

(clojure.core/defn
 change-counter
 [conn counter amount]
 (clojure.core/let
  [request (clojure.core/zipmap [:counter :amount] [counter amount])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/ChangeCounterRequest
   request)))

(clojure.core/defn
 set-counter
 [conn counter value]
 (clojure.core/let
  [request (clojure.core/zipmap [:counter :value] [counter value])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/SetCounterRequest
   request)))

(clojure.core/defn
 create-alarm
 [conn id value]
 (clojure.core/let
  [request (clojure.core/zipmap [:id :value] [id value])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/CreateAlarmRequest
   request)))

(clojure.core/defn
 change-alarm
 [conn id value]
 (clojure.core/let
  [request (clojure.core/zipmap [:id :value] [id value])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/ChangeAlarmRequest
   request)))

(clojure.core/defn
 destroy-alarm
 [conn alarm]
 (clojure.core/let
  [request (clojure.core/zipmap [:alarm] [alarm])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/DestroyAlarmRequest
   request)))

(clojure.core/defn
 query-alarm
 [conn alarm]
 (clojure.core/let
  [request (clojure.core/zipmap [:alarm] [alarm])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/QueryAlarmRequest
   request)))

(clojure.core/defn
 set-priority
 [conn id priority]
 (clojure.core/let
  [request (clojure.core/zipmap [:id :priority] [id priority])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/SetPriorityRequest
   request)))

(clojure.core/defn
 get-priority
 [conn id]
 (clojure.core/let
  [request (clojure.core/zipmap [:id] [id])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/GetPriorityRequest
   request)))

(clojure.core/defn
 create-fence
 [conn drawable fence initially-triggered]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :fence :initially-triggered]
    [drawable fence initially-triggered])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/CreateFenceRequest
   request)))

(clojure.core/defn
 trigger-fence
 [conn fence]
 (clojure.core/let
  [request (clojure.core/zipmap [:fence] [fence])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/TriggerFenceRequest
   request)))

(clojure.core/defn
 reset-fence
 [conn fence]
 (clojure.core/let
  [request (clojure.core/zipmap [:fence] [fence])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/ResetFenceRequest
   request)))

(clojure.core/defn
 destroy-fence
 [conn fence]
 (clojure.core/let
  [request (clojure.core/zipmap [:fence] [fence])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/DestroyFenceRequest
   request)))

(clojure.core/defn
 query-fence
 [conn fence]
 (clojure.core/let
  [request (clojure.core/zipmap [:fence] [fence])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/QueryFenceRequest
   request)))

(clojure.core/defn
 await-fence
 [conn fence-list]
 (clojure.core/let
  [request (clojure.core/zipmap [:fence-list] [fence-list])]
  (xcljb.conn-ext/send
   conn
   "SYNC"
   xcljb.gen.sync-types/AwaitFenceRequest
   request)))

;;; Manually written.
