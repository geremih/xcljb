;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.glx-internal
 (:require [xcljb common gen-common] [xcljb.gen glx-types]))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 5]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/MakeCurrentReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 6]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/IsDirectReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 7]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/QueryVersionReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 14]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetVisualConfigsReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 17]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/VendorPrivateWithReplyReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 18]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/QueryExtensionsStringReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 19]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/QueryServerStringReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 21]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetFBConfigsReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 25]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/QueryContextReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 26]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/MakeContextCurrentReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 29]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetDrawableAttributesReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 104]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GenListsReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 107]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/RenderModeReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 108]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/FinishReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 111]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/ReadPixelsReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 112]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetBooleanvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 113]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetClipPlaneReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 114]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetDoublevReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 115]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetErrorReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 116]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetFloatvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 117]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetIntegervReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 118]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetLightfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 119]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetLightivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 120]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMapdvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 121]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMapfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 122]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMapivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 123]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMaterialfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 124]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMaterialivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 125]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetPixelMapfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 126]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetPixelMapuivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 127]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetPixelMapusvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 128]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetPolygonStippleReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 129]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetStringReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 130]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexEnvfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 131]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexEnvivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 132]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexGendvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 133]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexGenfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 134]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexGenivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 135]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexImageReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 136]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexParameterfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 137]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexParameterivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 138]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexLevelParameterfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 139]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetTexLevelParameterivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 141]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/IsListReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 143]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/AreTexturesResidentReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 145]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GenTexturesReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 146]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/IsTextureReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 147]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetColorTableReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 148]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetColorTableParameterfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 149]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetColorTableParameterivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 150]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetConvolutionFilterReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 151]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetConvolutionParameterfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 152]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetConvolutionParameterivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 153]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetSeparableFilterReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 154]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetHistogramReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 155]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetHistogramParameterfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 156]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetHistogramParameterivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 157]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMinmaxReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 158]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMinmaxParameterfvReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 159]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetMinmaxParameterivReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 160]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetCompressedTexImageARBReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 162]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GenQueriesARBReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 163]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/IsQueryARBReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 164]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetQueryivARBReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 165]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetQueryObjectivARBReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-reply
 ["GLX" 166]
 [_ _ reply-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GetQueryObjectuivARBReply
  reply-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-event
 ["GLX" 0]
 [_ _ event-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/PbufferClobberEvent
  event-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" -1]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GenericError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 0]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadContextError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 1]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadContextStateError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 2]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadDrawableError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 3]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadPixmapError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 4]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadContextTagError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 5]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadCurrentWindowError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 6]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadRenderRequestError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 7]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadLargeRequestError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 8]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/UnsupportedPrivateRequestError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 9]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadFBConfigError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 10]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadPbufferError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 11]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadCurrentDrawableError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 12]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/BadWindowError
  error-buf
  nil))

(clojure.core/defmethod
 xcljb.common/read-error
 ["GLX" 13]
 [_ _ error-buf]
 (xcljb.gen-common/deserialize
  xcljb.gen.glx-types/GLXBadProfileARBError
  error-buf
  nil))

;;; Manually written.
