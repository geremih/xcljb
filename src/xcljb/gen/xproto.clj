;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xproto
 (:require xcljb.conn-internal xcljb.gen.xproto-types))

(def
 -XCLJB
 {:minor-version nil,
  :major-version nil,
  :header "xproto",
  :extension-multiword false,
  :extension-name nil,
  :extension-xname nil})

(def BUTTON-INDEX {:5 5, :4 4, :3 3, :2 2, :1 1, :any 0})

(def MAPPING-STATUS {:failure 2, :busy 1, :success 0})

(def CLIP-ORDERING {:yxbanded 3, :yxsorted 2, :ysorted 1, :unsorted 0})

(def CIRCULATE {:lower-highest 1, :raise-lowest 0})

(def BACK-PIXMAP {:parent-relative 1, :none 0})

(def
 FAMILY
 {:internet6 6,
  :server-interpreted 5,
  :chaos 2,
  :decnet 1,
  :internet 0})

(def SET-MODE {:delete 1, :insert 0})

(def GET-PROPERTY-TYPE {:any 0})

(def BACKING-STORE {:always 2, :when-mapped 1, :not-useful 0})

(def
 EVENT-MASK
 {:pointer-motion-hint 128,
  :property-change 4194304,
  :pointer-motion 64,
  :leave-window 32,
  :focus-change 2097152,
  :button4motion 2048,
  :substructure-redirect 1048576,
  :keymap-state 16384,
  :button3motion 1024,
  :no-event 0,
  :structure-notify 131072,
  :button1motion 256,
  :button-motion 8192,
  :color-map-change 8388608,
  :button-release 8,
  :key-press 1,
  :button-press 4,
  :resize-redirect 262144,
  :exposure 32768,
  :owner-grab-button 16777216,
  :button5motion 4096,
  :enter-window 16,
  :visibility-change 65536,
  :button2motion 512,
  :substructure-notify 524288,
  :key-release 2})

(def PROP-MODE {:append 2, :prepend 1, :replace 0})

(def PLACE {:on-bottom 1, :on-top 0})

(def JOIN-STYLE {:bevel 2, :round 1, :miter 0})

(def WINDOW-CLASS {:input-only 2, :input-output 1, :copy-from-parent 0})

(def SCREEN-SAVER {:active 1, :reset 0})

(def
 ALLOW
 {:sync-both 7,
  :async-both 6,
  :replay-keyboard 5,
  :sync-keyboard 4,
  :async-keyboard 3,
  :replay-pointer 2,
  :sync-pointer 1,
  :async-pointer 0})

(def
 STACK-MODE
 {:opposite 4, :bottom-if 3, :top-if 2, :below 1, :above 0})

(def HOST-MODE {:delete 1, :insert 0})

(def EXPOSURES {:default 2, :allowed 1, :not-allowed 0})

(def NOTIFY-MODE {:while-grabbed 3, :ungrab 2, :grab 1, :normal 0})

(def GRAB {:any 0})

(def AUTO-REPEAT-MODE {:default 2, :on 1, :off 0})

(def TIME {:current-time 0})

(def MAPPING {:pointer 2, :keyboard 1, :modifier 0})

(def
 MOD-MASK
 {:any 32768,
  :5 128,
  :4 64,
  :3 32,
  :2 16,
  :1 8,
  :control 4,
  :lock 2,
  :shift 1})

(def
 KEY-BUT-MASK
 {:mod4 64,
  :button3 1024,
  :lock 2,
  :button2 512,
  :button5 4096,
  :button4 2048,
  :control 4,
  :button1 256,
  :mod1 8,
  :shift 1,
  :mod3 32,
  :mod2 16,
  :mod5 128})

(def FILL-STYLE {:opaque-stippled 3, :stippled 2, :tiled 1, :solid 0})

(def
 GRAVITY
 {:win-unmap 0,
  :bit-forget 0,
  :west 4,
  :south-west 7,
  :north-east 3,
  :static 10,
  :center 5,
  :north 2,
  :south 8,
  :north-west 1,
  :east 6,
  :south-east 9})

(def LED-MODE {:on 1, :off 0})

(def BLANKING {:default 2, :preferred 1, :not-preferred 0})

(def
 INPUT-FOCUS
 {:follow-keyboard 3, :parent 2, :pointer-root 1, :none 0})

(def FONT {:none 0})

(def COLOR-FLAG {:blue 4, :green 2, :red 1})

(def GRAB-MODE {:async 1, :sync 0})

(def WINDOW {:none 0})

(def
 QUERY-SHAPE-OF
 {:fastest-stipple 2, :fastest-tile 1, :largest-cursor 0})

(def
 GX
 {:and-inverted 4,
  :nand 14,
  :or-reverse 11,
  :equiv 9,
  :or 7,
  :set 15,
  :noop 5,
  :xor 6,
  :invert 10,
  :and-reverse 2,
  :and 1,
  :nor 8,
  :or-inverted 13,
  :clear 0,
  :copy-inverted 12,
  :copy 3})

(def
 ATOM
 {:rgb-gray-map 28,
  :rgb-color-map 24,
  :superscript-y 48,
  :resolution 60,
  :wm-class 67,
  :quad-width 57,
  :end-space 46,
  :wm-zoom-hints 42,
  :wm-hints 35,
  :bitmap 5,
  :wm-icon-name 37,
  :string 31,
  :point 21,
  :max-space 45,
  :copyright 61,
  :pixmap 20,
  :rgb-green-map 29,
  :weight 58,
  :subscript-x 49,
  :subscript-y 50,
  :underline-position 51,
  :full-name 65,
  :norm-space 44,
  :cut-buffer1 10,
  :visualid 32,
  :cut-buffer2 11,
  :underline-thickness 52,
  :integer 19,
  :cut-buffer0 9,
  :notice 62,
  :strikeout-ascent 53,
  :any 0,
  :cursor 8,
  :cut-buffer6 15,
  :cut-buffer7 16,
  :wm-size-hints 41,
  :cut-buffer5 14,
  :cut-buffer4 13,
  :wm-command 34,
  :resource-manager 23,
  :family-name 64,
  :rgb-blue-map 26,
  :cap-height 66,
  :cut-buffer3 12,
  :primary 1,
  :rectangle 22,
  :wm-client-machine 36,
  :atom 4,
  :x-height 56,
  :rgb-default-map 27,
  :wm-icon-size 38,
  :point-size 59,
  :drawable 17,
  :arc 3,
  :none 0,
  :min-space 43,
  :italic-angle 55,
  :rgb-red-map 30,
  :cardinal 6,
  :secondary 2,
  :font-name 63,
  :strikeout-descent 54,
  :wm-name 39,
  :font 18,
  :wm-transient-for 68,
  :superscript-x 47,
  :window 33,
  :wm-normal-hints 40,
  :colormap 7,
  :rgb-best-map 25})

(def IMAGE-FORMAT {:zpixmap 2, :xypixmap 1, :xybitmap 0})

(def
 CONFIG-WINDOW
 {:stack-mode 64,
  :sibling 32,
  :border-width 16,
  :height 8,
  :width 4,
  :y 2,
  :x 1})

(def
 VISIBILITY
 {:fully-obscured 2, :partially-obscured 1, :unobscured 0})

(def FONT-DRAW {:right-to-left 1, :left-to-right 0})

(def IMAGE-ORDER {:msbfirst 1, :lsbfirst 0})

(def SUBWINDOW-MODE {:include-inferiors 1, :clip-by-children 0})

(def
 CW
 {:border-pixel 8,
  :backing-store 64,
  :win-gravity 32,
  :backing-planes 128,
  :bit-gravity 16,
  :save-under 1024,
  :override-redirect 512,
  :event-mask 2048,
  :cursor 16384,
  :dont-propagate 4096,
  :backing-pixel 256,
  :back-pixmap 1,
  :border-pixmap 4,
  :back-pixel 2,
  :colormap 8192})

(def SEND-EVENT-DEST {:item-focus 1, :pointer-window 0})

(def MAP-STATE {:viewable 2, :unviewable 1, :unmapped 0})

(def PROPERTY {:delete 1, :new-value 0})

(def ARC-MODE {:pie-slice 1, :chord 0})

(def POLY-SHAPE {:convex 2, :nonconvex 1, :complex 0})

(def
 MAP-INDEX
 {:5 7, :4 6, :3 5, :2 4, :1 3, :control 2, :lock 1, :shift 0})

(def CURSOR {:none 0})

(def MOTION {:hint 1, :normal 0})

(def
 KB
 {:auto-repeat-mode 128,
  :key 64,
  :led-mode 32,
  :led 16,
  :bell-duration 8,
  :bell-pitch 4,
  :bell-percent 2,
  :key-click-percent 1})

(def COLORMAP-STATE {:installed 1, :uninstalled 0})

(def
 VISUAL-CLASS
 {:direct-color 5,
  :true-color 4,
  :pseudo-color 3,
  :static-color 2,
  :gray-scale 1,
  :static-gray 0})

(def COORD-MODE {:previous 1, :origin 0})

(def ACCESS-CONTROL {:enable 1, :disable 0})

(def COLORMAP {:none 0})

(def
 NOTIFY-DETAIL
 {:none 7,
  :pointer-root 6,
  :pointer 5,
  :nonlinear-virtual 4,
  :nonlinear 3,
  :inferior 2,
  :virtual 1,
  :ancestor 0})

(def
 CLOSE-DOWN
 {:retain-temporary 2, :retain-permanent 1, :destroy-all 0})

(def
 GC
 {:line-style 32,
  :line-width 16,
  :tile 1024,
  :background 8,
  :dash-offset 1048576,
  :foreground 4,
  :dash-list 2097152,
  :graphics-exposures 65536,
  :fill-style 256,
  :plane-mask 2,
  :arc-mode 4194304,
  :function 1,
  :clip-origin-x 131072,
  :clip-origin-y 262144,
  :fill-rule 512,
  :stipple 2048,
  :cap-style 64,
  :subwindow-mode 32768,
  :clip-mask 524288,
  :join-style 128,
  :font 16384,
  :tile-stipple-origin-x 4096,
  :tile-stipple-origin-y 8192})

(def COLORMAP-ALLOC {:all 1, :none 0})

(def LINE-STYLE {:double-dash 2, :on-off-dash 1, :solid 0})

(def PIXMAP {:none 0})

(def
 BUTTON-MASK
 {:any 32768, :5 4096, :4 2048, :3 1024, :2 512, :1 256})

(def
 GRAB-STATUS
 {:frozen 4,
  :not-viewable 3,
  :invalid-time 2,
  :already-grabbed 1,
  :success 0})

(def KILL {:all-temporary 0})

(def CAP-STYLE {:projecting 3, :round 2, :butt 1, :not-last 0})

(def FILL-RULE {:winding 1, :even-odd 0})

(clojure.core/defn
 create-window
 [conn1621
  depth
  wid
  parent
  x
  y
  width
  height
  border-width
  class
  visual
  value]
 (clojure.core/let
  [request-struct1622
   (xcljb.gen.xproto-types/->CreateWindowRequest
    depth
    wid
    parent
    x
    y
    width
    height
    border-width
    class
    visual
    value)]
  (xcljb.conn-internal/send conn1621 request-struct1622)))

(clojure.core/defn
 change-window-attributes
 [conn1623 window value]
 (clojure.core/let
  [request-struct1624
   (xcljb.gen.xproto-types/->ChangeWindowAttributesRequest
    window
    value)]
  (xcljb.conn-internal/send conn1623 request-struct1624)))

(clojure.core/defn
 get-window-attributes
 [conn1625 window]
 (clojure.core/let
  [request-struct1626
   (xcljb.gen.xproto-types/->GetWindowAttributesRequest window)]
  (xcljb.conn-internal/send conn1625 request-struct1626)))

(clojure.core/defn
 destroy-window
 [conn1627 window]
 (clojure.core/let
  [request-struct1628
   (xcljb.gen.xproto-types/->DestroyWindowRequest window)]
  (xcljb.conn-internal/send conn1627 request-struct1628)))

(clojure.core/defn
 destroy-subwindows
 [conn1629 window]
 (clojure.core/let
  [request-struct1630
   (xcljb.gen.xproto-types/->DestroySubwindowsRequest window)]
  (xcljb.conn-internal/send conn1629 request-struct1630)))

(clojure.core/defn
 change-save-set
 [conn1631 mode window]
 (clojure.core/let
  [request-struct1632
   (xcljb.gen.xproto-types/->ChangeSaveSetRequest mode window)]
  (xcljb.conn-internal/send conn1631 request-struct1632)))

(clojure.core/defn
 reparent-window
 [conn1633 window parent x y]
 (clojure.core/let
  [request-struct1634
   (xcljb.gen.xproto-types/->ReparentWindowRequest window parent x y)]
  (xcljb.conn-internal/send conn1633 request-struct1634)))

(clojure.core/defn
 map-window
 [conn1635 window]
 (clojure.core/let
  [request-struct1636
   (xcljb.gen.xproto-types/->MapWindowRequest window)]
  (xcljb.conn-internal/send conn1635 request-struct1636)))

(clojure.core/defn
 map-subwindows
 [conn1637 window]
 (clojure.core/let
  [request-struct1638
   (xcljb.gen.xproto-types/->MapSubwindowsRequest window)]
  (xcljb.conn-internal/send conn1637 request-struct1638)))

(clojure.core/defn
 unmap-window
 [conn1639 window]
 (clojure.core/let
  [request-struct1640
   (xcljb.gen.xproto-types/->UnmapWindowRequest window)]
  (xcljb.conn-internal/send conn1639 request-struct1640)))

(clojure.core/defn
 unmap-subwindows
 [conn1641 window]
 (clojure.core/let
  [request-struct1642
   (xcljb.gen.xproto-types/->UnmapSubwindowsRequest window)]
  (xcljb.conn-internal/send conn1641 request-struct1642)))

(clojure.core/defn
 circulate-window
 [conn1643 direction window]
 (clojure.core/let
  [request-struct1644
   (xcljb.gen.xproto-types/->CirculateWindowRequest direction window)]
  (xcljb.conn-internal/send conn1643 request-struct1644)))

(clojure.core/defn
 get-geometry
 [conn1645 drawable]
 (clojure.core/let
  [request-struct1646
   (xcljb.gen.xproto-types/->GetGeometryRequest drawable)]
  (xcljb.conn-internal/send conn1645 request-struct1646)))

(clojure.core/defn
 query-tree
 [conn1647 window]
 (clojure.core/let
  [request-struct1648
   (xcljb.gen.xproto-types/->QueryTreeRequest window)]
  (xcljb.conn-internal/send conn1647 request-struct1648)))

(clojure.core/defn
 intern-atom
 [conn1649 only-if-exists name-len name]
 (clojure.core/let
  [request-struct1650
   (xcljb.gen.xproto-types/->InternAtomRequest
    only-if-exists
    name-len
    name)]
  (xcljb.conn-internal/send conn1649 request-struct1650)))

(clojure.core/defn
 get-atom-name
 [conn1651 atom]
 (clojure.core/let
  [request-struct1652
   (xcljb.gen.xproto-types/->GetAtomNameRequest atom)]
  (xcljb.conn-internal/send conn1651 request-struct1652)))

(clojure.core/defn
 change-property
 [conn1653 mode window property type format data-len data]
 (clojure.core/let
  [request-struct1654
   (xcljb.gen.xproto-types/->ChangePropertyRequest
    mode
    window
    property
    type
    format
    data-len
    data)]
  (xcljb.conn-internal/send conn1653 request-struct1654)))

(clojure.core/defn
 delete-property
 [conn1655 window property]
 (clojure.core/let
  [request-struct1656
   (xcljb.gen.xproto-types/->DeletePropertyRequest window property)]
  (xcljb.conn-internal/send conn1655 request-struct1656)))

(clojure.core/defn
 get-property
 [conn1657 delete window property type long-offset long-length]
 (clojure.core/let
  [request-struct1658
   (xcljb.gen.xproto-types/->GetPropertyRequest
    delete
    window
    property
    type
    long-offset
    long-length)]
  (xcljb.conn-internal/send conn1657 request-struct1658)))

(clojure.core/defn
 list-properties
 [conn1659 window]
 (clojure.core/let
  [request-struct1660
   (xcljb.gen.xproto-types/->ListPropertiesRequest window)]
  (xcljb.conn-internal/send conn1659 request-struct1660)))

(clojure.core/defn
 set-selection-owner
 [conn1661 owner selection time]
 (clojure.core/let
  [request-struct1662
   (xcljb.gen.xproto-types/->SetSelectionOwnerRequest
    owner
    selection
    time)]
  (xcljb.conn-internal/send conn1661 request-struct1662)))

(clojure.core/defn
 get-selection-owner
 [conn1663 selection]
 (clojure.core/let
  [request-struct1664
   (xcljb.gen.xproto-types/->GetSelectionOwnerRequest selection)]
  (xcljb.conn-internal/send conn1663 request-struct1664)))

(clojure.core/defn
 convert-selection
 [conn1665 requestor selection target property time]
 (clojure.core/let
  [request-struct1666
   (xcljb.gen.xproto-types/->ConvertSelectionRequest
    requestor
    selection
    target
    property
    time)]
  (xcljb.conn-internal/send conn1665 request-struct1666)))

(clojure.core/defn
 send-event
 [conn1667 propagate destination event-mask event]
 (clojure.core/let
  [request-struct1668
   (xcljb.gen.xproto-types/->SendEventRequest
    propagate
    destination
    event-mask
    event)]
  (xcljb.conn-internal/send conn1667 request-struct1668)))

(clojure.core/defn
 grab-pointer
 [conn1669
  owner-events
  grab-window
  event-mask
  pointer-mode
  keyboard-mode
  confine-to
  cursor
  time]
 (clojure.core/let
  [request-struct1670
   (xcljb.gen.xproto-types/->GrabPointerRequest
    owner-events
    grab-window
    event-mask
    pointer-mode
    keyboard-mode
    confine-to
    cursor
    time)]
  (xcljb.conn-internal/send conn1669 request-struct1670)))

(clojure.core/defn
 ungrab-pointer
 [conn1671 time]
 (clojure.core/let
  [request-struct1672
   (xcljb.gen.xproto-types/->UngrabPointerRequest time)]
  (xcljb.conn-internal/send conn1671 request-struct1672)))

(clojure.core/defn
 grab-button
 [conn1673
  owner-events
  grab-window
  event-mask
  pointer-mode
  keyboard-mode
  confine-to
  cursor
  button
  modifiers]
 (clojure.core/let
  [request-struct1674
   (xcljb.gen.xproto-types/->GrabButtonRequest
    owner-events
    grab-window
    event-mask
    pointer-mode
    keyboard-mode
    confine-to
    cursor
    button
    modifiers)]
  (xcljb.conn-internal/send conn1673 request-struct1674)))

(clojure.core/defn
 ungrab-button
 [conn1675 button grab-window modifiers]
 (clojure.core/let
  [request-struct1676
   (xcljb.gen.xproto-types/->UngrabButtonRequest
    button
    grab-window
    modifiers)]
  (xcljb.conn-internal/send conn1675 request-struct1676)))

(clojure.core/defn
 change-active-pointer-grab
 [conn1677 cursor time event-mask]
 (clojure.core/let
  [request-struct1678
   (xcljb.gen.xproto-types/->ChangeActivePointerGrabRequest
    cursor
    time
    event-mask)]
  (xcljb.conn-internal/send conn1677 request-struct1678)))

(clojure.core/defn
 grab-keyboard
 [conn1679 owner-events grab-window time pointer-mode keyboard-mode]
 (clojure.core/let
  [request-struct1680
   (xcljb.gen.xproto-types/->GrabKeyboardRequest
    owner-events
    grab-window
    time
    pointer-mode
    keyboard-mode)]
  (xcljb.conn-internal/send conn1679 request-struct1680)))

(clojure.core/defn
 ungrab-keyboard
 [conn1681 time]
 (clojure.core/let
  [request-struct1682
   (xcljb.gen.xproto-types/->UngrabKeyboardRequest time)]
  (xcljb.conn-internal/send conn1681 request-struct1682)))

(clojure.core/defn
 grab-key
 [conn1683
  owner-events
  grab-window
  modifiers
  key
  pointer-mode
  keyboard-mode]
 (clojure.core/let
  [request-struct1684
   (xcljb.gen.xproto-types/->GrabKeyRequest
    owner-events
    grab-window
    modifiers
    key
    pointer-mode
    keyboard-mode)]
  (xcljb.conn-internal/send conn1683 request-struct1684)))

(clojure.core/defn
 ungrab-key
 [conn1685 key grab-window modifiers]
 (clojure.core/let
  [request-struct1686
   (xcljb.gen.xproto-types/->UngrabKeyRequest
    key
    grab-window
    modifiers)]
  (xcljb.conn-internal/send conn1685 request-struct1686)))

(clojure.core/defn
 allow-events
 [conn1687 mode time]
 (clojure.core/let
  [request-struct1688
   (xcljb.gen.xproto-types/->AllowEventsRequest mode time)]
  (xcljb.conn-internal/send conn1687 request-struct1688)))

(clojure.core/defn
 grab-server
 [conn1689]
 (clojure.core/let
  [request-struct1690 (xcljb.gen.xproto-types/->GrabServerRequest)]
  (xcljb.conn-internal/send conn1689 request-struct1690)))

(clojure.core/defn
 ungrab-server
 [conn1691]
 (clojure.core/let
  [request-struct1692 (xcljb.gen.xproto-types/->UngrabServerRequest)]
  (xcljb.conn-internal/send conn1691 request-struct1692)))

(clojure.core/defn
 query-pointer
 [conn1693 window]
 (clojure.core/let
  [request-struct1694
   (xcljb.gen.xproto-types/->QueryPointerRequest window)]
  (xcljb.conn-internal/send conn1693 request-struct1694)))

(clojure.core/defn
 get-motion-events
 [conn1695 window start stop]
 (clojure.core/let
  [request-struct1696
   (xcljb.gen.xproto-types/->GetMotionEventsRequest window start stop)]
  (xcljb.conn-internal/send conn1695 request-struct1696)))

(clojure.core/defn
 translate-coordinates
 [conn1697 src-window dst-window src-x src-y]
 (clojure.core/let
  [request-struct1698
   (xcljb.gen.xproto-types/->TranslateCoordinatesRequest
    src-window
    dst-window
    src-x
    src-y)]
  (xcljb.conn-internal/send conn1697 request-struct1698)))

(clojure.core/defn
 warp-pointer
 [conn1699
  src-window
  dst-window
  src-x
  src-y
  src-width
  src-height
  dst-x
  dst-y]
 (clojure.core/let
  [request-struct1700
   (xcljb.gen.xproto-types/->WarpPointerRequest
    src-window
    dst-window
    src-x
    src-y
    src-width
    src-height
    dst-x
    dst-y)]
  (xcljb.conn-internal/send conn1699 request-struct1700)))

(clojure.core/defn
 set-input-focus
 [conn1701 revert-to focus time]
 (clojure.core/let
  [request-struct1702
   (xcljb.gen.xproto-types/->SetInputFocusRequest
    revert-to
    focus
    time)]
  (xcljb.conn-internal/send conn1701 request-struct1702)))

(clojure.core/defn
 get-input-focus
 [conn1703]
 (clojure.core/let
  [request-struct1704 (xcljb.gen.xproto-types/->GetInputFocusRequest)]
  (xcljb.conn-internal/send conn1703 request-struct1704)))

(clojure.core/defn
 query-keymap
 [conn1705]
 (clojure.core/let
  [request-struct1706 (xcljb.gen.xproto-types/->QueryKeymapRequest)]
  (xcljb.conn-internal/send conn1705 request-struct1706)))

(clojure.core/defn
 open-font
 [conn1707 fid name-len name]
 (clojure.core/let
  [request-struct1708
   (xcljb.gen.xproto-types/->OpenFontRequest fid name-len name)]
  (xcljb.conn-internal/send conn1707 request-struct1708)))

(clojure.core/defn
 close-font
 [conn1709 font]
 (clojure.core/let
  [request-struct1710 (xcljb.gen.xproto-types/->CloseFontRequest font)]
  (xcljb.conn-internal/send conn1709 request-struct1710)))

(clojure.core/defn
 query-font
 [conn1711 font]
 (clojure.core/let
  [request-struct1712 (xcljb.gen.xproto-types/->QueryFontRequest font)]
  (xcljb.conn-internal/send conn1711 request-struct1712)))

(clojure.core/defn
 list-fonts
 [conn1713 max-names pattern-len pattern]
 (clojure.core/let
  [request-struct1714
   (xcljb.gen.xproto-types/->ListFontsRequest
    max-names
    pattern-len
    pattern)]
  (xcljb.conn-internal/send conn1713 request-struct1714)))

(clojure.core/defn
 list-fonts-with-info
 [conn1715 max-names pattern-len pattern]
 (clojure.core/let
  [request-struct1716
   (xcljb.gen.xproto-types/->ListFontsWithInfoRequest
    max-names
    pattern-len
    pattern)]
  (xcljb.conn-internal/send conn1715 request-struct1716)))

(clojure.core/defn
 set-font-path
 [conn1717 font-qty font]
 (clojure.core/let
  [request-struct1718
   (xcljb.gen.xproto-types/->SetFontPathRequest font-qty font)]
  (xcljb.conn-internal/send conn1717 request-struct1718)))

(clojure.core/defn
 get-font-path
 [conn1719]
 (clojure.core/let
  [request-struct1720 (xcljb.gen.xproto-types/->GetFontPathRequest)]
  (xcljb.conn-internal/send conn1719 request-struct1720)))

(clojure.core/defn
 create-pixmap
 [conn1721 depth pid drawable width height]
 (clojure.core/let
  [request-struct1722
   (xcljb.gen.xproto-types/->CreatePixmapRequest
    depth
    pid
    drawable
    width
    height)]
  (xcljb.conn-internal/send conn1721 request-struct1722)))

(clojure.core/defn
 free-pixmap
 [conn1723 pixmap]
 (clojure.core/let
  [request-struct1724
   (xcljb.gen.xproto-types/->FreePixmapRequest pixmap)]
  (xcljb.conn-internal/send conn1723 request-struct1724)))

(clojure.core/defn
 create-gc
 [conn1725 cid drawable value]
 (clojure.core/let
  [request-struct1726
   (xcljb.gen.xproto-types/->CreateGCRequest cid drawable value)]
  (xcljb.conn-internal/send conn1725 request-struct1726)))

(clojure.core/defn
 change-gc
 [conn1727 gc value]
 (clojure.core/let
  [request-struct1728
   (xcljb.gen.xproto-types/->ChangeGCRequest gc value)]
  (xcljb.conn-internal/send conn1727 request-struct1728)))

(clojure.core/defn
 copy-gc
 [conn1729 src-gc dst-gc value-mask]
 (clojure.core/let
  [request-struct1730
   (xcljb.gen.xproto-types/->CopyGCRequest src-gc dst-gc value-mask)]
  (xcljb.conn-internal/send conn1729 request-struct1730)))

(clojure.core/defn
 set-dashes
 [conn1731 gc dash-offset dashes-len dashes]
 (clojure.core/let
  [request-struct1732
   (xcljb.gen.xproto-types/->SetDashesRequest
    gc
    dash-offset
    dashes-len
    dashes)]
  (xcljb.conn-internal/send conn1731 request-struct1732)))

(clojure.core/defn
 set-clip-rectangles
 [conn1733 ordering gc clip-x-origin clip-y-origin rectangles]
 (clojure.core/let
  [request-struct1734
   (xcljb.gen.xproto-types/->SetClipRectanglesRequest
    ordering
    gc
    clip-x-origin
    clip-y-origin
    rectangles)]
  (xcljb.conn-internal/send conn1733 request-struct1734)))

(clojure.core/defn
 free-gc
 [conn1735 gc]
 (clojure.core/let
  [request-struct1736 (xcljb.gen.xproto-types/->FreeGCRequest gc)]
  (xcljb.conn-internal/send conn1735 request-struct1736)))

(clojure.core/defn
 clear-area
 [conn1737 exposures window x y width height]
 (clojure.core/let
  [request-struct1738
   (xcljb.gen.xproto-types/->ClearAreaRequest
    exposures
    window
    x
    y
    width
    height)]
  (xcljb.conn-internal/send conn1737 request-struct1738)))

(clojure.core/defn
 copy-area
 [conn1739
  src-drawable
  dst-drawable
  gc
  src-x
  src-y
  dst-x
  dst-y
  width
  height]
 (clojure.core/let
  [request-struct1740
   (xcljb.gen.xproto-types/->CopyAreaRequest
    src-drawable
    dst-drawable
    gc
    src-x
    src-y
    dst-x
    dst-y
    width
    height)]
  (xcljb.conn-internal/send conn1739 request-struct1740)))

(clojure.core/defn
 copy-plane
 [conn1741
  src-drawable
  dst-drawable
  gc
  src-x
  src-y
  dst-x
  dst-y
  width
  height
  bit-plane]
 (clojure.core/let
  [request-struct1742
   (xcljb.gen.xproto-types/->CopyPlaneRequest
    src-drawable
    dst-drawable
    gc
    src-x
    src-y
    dst-x
    dst-y
    width
    height
    bit-plane)]
  (xcljb.conn-internal/send conn1741 request-struct1742)))

(clojure.core/defn
 poly-point
 [conn1743 coordinate-mode drawable gc points]
 (clojure.core/let
  [request-struct1744
   (xcljb.gen.xproto-types/->PolyPointRequest
    coordinate-mode
    drawable
    gc
    points)]
  (xcljb.conn-internal/send conn1743 request-struct1744)))

(clojure.core/defn
 poly-line
 [conn1745 coordinate-mode drawable gc points]
 (clojure.core/let
  [request-struct1746
   (xcljb.gen.xproto-types/->PolyLineRequest
    coordinate-mode
    drawable
    gc
    points)]
  (xcljb.conn-internal/send conn1745 request-struct1746)))

(clojure.core/defn
 poly-segment
 [conn1747 drawable gc segments]
 (clojure.core/let
  [request-struct1748
   (xcljb.gen.xproto-types/->PolySegmentRequest drawable gc segments)]
  (xcljb.conn-internal/send conn1747 request-struct1748)))

(clojure.core/defn
 poly-rectangle
 [conn1749 drawable gc rectangles]
 (clojure.core/let
  [request-struct1750
   (xcljb.gen.xproto-types/->PolyRectangleRequest
    drawable
    gc
    rectangles)]
  (xcljb.conn-internal/send conn1749 request-struct1750)))

(clojure.core/defn
 poly-arc
 [conn1751 drawable gc arcs]
 (clojure.core/let
  [request-struct1752
   (xcljb.gen.xproto-types/->PolyArcRequest drawable gc arcs)]
  (xcljb.conn-internal/send conn1751 request-struct1752)))

(clojure.core/defn
 fill-poly
 [conn1753 drawable gc shape coordinate-mode points]
 (clojure.core/let
  [request-struct1754
   (xcljb.gen.xproto-types/->FillPolyRequest
    drawable
    gc
    shape
    coordinate-mode
    points)]
  (xcljb.conn-internal/send conn1753 request-struct1754)))

(clojure.core/defn
 poly-fill-rectangle
 [conn1755 drawable gc rectangles]
 (clojure.core/let
  [request-struct1756
   (xcljb.gen.xproto-types/->PolyFillRectangleRequest
    drawable
    gc
    rectangles)]
  (xcljb.conn-internal/send conn1755 request-struct1756)))

(clojure.core/defn
 poly-fill-arc
 [conn1757 drawable gc arcs]
 (clojure.core/let
  [request-struct1758
   (xcljb.gen.xproto-types/->PolyFillArcRequest drawable gc arcs)]
  (xcljb.conn-internal/send conn1757 request-struct1758)))

(clojure.core/defn
 put-image
 [conn1759
  format
  drawable
  gc
  width
  height
  dst-x
  dst-y
  left-pad
  depth
  data]
 (clojure.core/let
  [request-struct1760
   (xcljb.gen.xproto-types/->PutImageRequest
    format
    drawable
    gc
    width
    height
    dst-x
    dst-y
    left-pad
    depth
    data)]
  (xcljb.conn-internal/send conn1759 request-struct1760)))

(clojure.core/defn
 get-image
 [conn1761 format drawable x y width height plane-mask]
 (clojure.core/let
  [request-struct1762
   (xcljb.gen.xproto-types/->GetImageRequest
    format
    drawable
    x
    y
    width
    height
    plane-mask)]
  (xcljb.conn-internal/send conn1761 request-struct1762)))

(clojure.core/defn
 poly-text8
 [conn1763 drawable gc x y items]
 (clojure.core/let
  [request-struct1764
   (xcljb.gen.xproto-types/->PolyText8Request drawable gc x y items)]
  (xcljb.conn-internal/send conn1763 request-struct1764)))

(clojure.core/defn
 poly-text16
 [conn1765 drawable gc x y items]
 (clojure.core/let
  [request-struct1766
   (xcljb.gen.xproto-types/->PolyText16Request drawable gc x y items)]
  (xcljb.conn-internal/send conn1765 request-struct1766)))

(clojure.core/defn
 image-text8
 [conn1767 string-len drawable gc x y string]
 (clojure.core/let
  [request-struct1768
   (xcljb.gen.xproto-types/->ImageText8Request
    string-len
    drawable
    gc
    x
    y
    string)]
  (xcljb.conn-internal/send conn1767 request-struct1768)))

(clojure.core/defn
 image-text16
 [conn1769 string-len drawable gc x y string]
 (clojure.core/let
  [request-struct1770
   (xcljb.gen.xproto-types/->ImageText16Request
    string-len
    drawable
    gc
    x
    y
    string)]
  (xcljb.conn-internal/send conn1769 request-struct1770)))

(clojure.core/defn
 create-colormap
 [conn1771 alloc mid window visual]
 (clojure.core/let
  [request-struct1772
   (xcljb.gen.xproto-types/->CreateColormapRequest
    alloc
    mid
    window
    visual)]
  (xcljb.conn-internal/send conn1771 request-struct1772)))

(clojure.core/defn
 free-colormap
 [conn1773 cmap]
 (clojure.core/let
  [request-struct1774
   (xcljb.gen.xproto-types/->FreeColormapRequest cmap)]
  (xcljb.conn-internal/send conn1773 request-struct1774)))

(clojure.core/defn
 copy-colormap-and-free
 [conn1775 mid src-cmap]
 (clojure.core/let
  [request-struct1776
   (xcljb.gen.xproto-types/->CopyColormapAndFreeRequest mid src-cmap)]
  (xcljb.conn-internal/send conn1775 request-struct1776)))

(clojure.core/defn
 install-colormap
 [conn1777 cmap]
 (clojure.core/let
  [request-struct1778
   (xcljb.gen.xproto-types/->InstallColormapRequest cmap)]
  (xcljb.conn-internal/send conn1777 request-struct1778)))

(clojure.core/defn
 uninstall-colormap
 [conn1779 cmap]
 (clojure.core/let
  [request-struct1780
   (xcljb.gen.xproto-types/->UninstallColormapRequest cmap)]
  (xcljb.conn-internal/send conn1779 request-struct1780)))

(clojure.core/defn
 list-installed-colormaps
 [conn1781 window]
 (clojure.core/let
  [request-struct1782
   (xcljb.gen.xproto-types/->ListInstalledColormapsRequest window)]
  (xcljb.conn-internal/send conn1781 request-struct1782)))

(clojure.core/defn
 alloc-color
 [conn1783 cmap red green blue]
 (clojure.core/let
  [request-struct1784
   (xcljb.gen.xproto-types/->AllocColorRequest cmap red green blue)]
  (xcljb.conn-internal/send conn1783 request-struct1784)))

(clojure.core/defn
 alloc-named-color
 [conn1785 cmap name-len name]
 (clojure.core/let
  [request-struct1786
   (xcljb.gen.xproto-types/->AllocNamedColorRequest
    cmap
    name-len
    name)]
  (xcljb.conn-internal/send conn1785 request-struct1786)))

(clojure.core/defn
 alloc-color-cells
 [conn1787 contiguous cmap colors planes]
 (clojure.core/let
  [request-struct1788
   (xcljb.gen.xproto-types/->AllocColorCellsRequest
    contiguous
    cmap
    colors
    planes)]
  (xcljb.conn-internal/send conn1787 request-struct1788)))

(clojure.core/defn
 alloc-color-planes
 [conn1789 contiguous cmap colors reds greens blues]
 (clojure.core/let
  [request-struct1790
   (xcljb.gen.xproto-types/->AllocColorPlanesRequest
    contiguous
    cmap
    colors
    reds
    greens
    blues)]
  (xcljb.conn-internal/send conn1789 request-struct1790)))

(clojure.core/defn
 free-colors
 [conn1791 cmap plane-mask pixels]
 (clojure.core/let
  [request-struct1792
   (xcljb.gen.xproto-types/->FreeColorsRequest cmap plane-mask pixels)]
  (xcljb.conn-internal/send conn1791 request-struct1792)))

(clojure.core/defn
 store-colors
 [conn1793 cmap items]
 (clojure.core/let
  [request-struct1794
   (xcljb.gen.xproto-types/->StoreColorsRequest cmap items)]
  (xcljb.conn-internal/send conn1793 request-struct1794)))

(clojure.core/defn
 store-named-color
 [conn1795 flags cmap pixel name-len name]
 (clojure.core/let
  [request-struct1796
   (xcljb.gen.xproto-types/->StoreNamedColorRequest
    flags
    cmap
    pixel
    name-len
    name)]
  (xcljb.conn-internal/send conn1795 request-struct1796)))

(clojure.core/defn
 query-colors
 [conn1797 cmap pixels]
 (clojure.core/let
  [request-struct1798
   (xcljb.gen.xproto-types/->QueryColorsRequest cmap pixels)]
  (xcljb.conn-internal/send conn1797 request-struct1798)))

(clojure.core/defn
 lookup-color
 [conn1799 cmap name-len name]
 (clojure.core/let
  [request-struct1800
   (xcljb.gen.xproto-types/->LookupColorRequest cmap name-len name)]
  (xcljb.conn-internal/send conn1799 request-struct1800)))

(clojure.core/defn
 create-cursor
 [conn1801
  cid
  source
  mask
  fore-red
  fore-green
  fore-blue
  back-red
  back-green
  back-blue
  x
  y]
 (clojure.core/let
  [request-struct1802
   (xcljb.gen.xproto-types/->CreateCursorRequest
    cid
    source
    mask
    fore-red
    fore-green
    fore-blue
    back-red
    back-green
    back-blue
    x
    y)]
  (xcljb.conn-internal/send conn1801 request-struct1802)))

(clojure.core/defn
 create-glyph-cursor
 [conn1803
  cid
  source-font
  mask-font
  source-char
  mask-char
  fore-red
  fore-green
  fore-blue
  back-red
  back-green
  back-blue]
 (clojure.core/let
  [request-struct1804
   (xcljb.gen.xproto-types/->CreateGlyphCursorRequest
    cid
    source-font
    mask-font
    source-char
    mask-char
    fore-red
    fore-green
    fore-blue
    back-red
    back-green
    back-blue)]
  (xcljb.conn-internal/send conn1803 request-struct1804)))

(clojure.core/defn
 free-cursor
 [conn1805 cursor]
 (clojure.core/let
  [request-struct1806
   (xcljb.gen.xproto-types/->FreeCursorRequest cursor)]
  (xcljb.conn-internal/send conn1805 request-struct1806)))

(clojure.core/defn
 recolor-cursor
 [conn1807
  cursor
  fore-red
  fore-green
  fore-blue
  back-red
  back-green
  back-blue]
 (clojure.core/let
  [request-struct1808
   (xcljb.gen.xproto-types/->RecolorCursorRequest
    cursor
    fore-red
    fore-green
    fore-blue
    back-red
    back-green
    back-blue)]
  (xcljb.conn-internal/send conn1807 request-struct1808)))

(clojure.core/defn
 query-best-size
 [conn1809 class drawable width height]
 (clojure.core/let
  [request-struct1810
   (xcljb.gen.xproto-types/->QueryBestSizeRequest
    class
    drawable
    width
    height)]
  (xcljb.conn-internal/send conn1809 request-struct1810)))

(clojure.core/defn
 query-extension
 [conn1811 name-len name]
 (clojure.core/let
  [request-struct1812
   (xcljb.gen.xproto-types/->QueryExtensionRequest name-len name)]
  (xcljb.conn-internal/send conn1811 request-struct1812)))

(clojure.core/defn
 list-extensions
 [conn1813]
 (clojure.core/let
  [request-struct1814 (xcljb.gen.xproto-types/->ListExtensionsRequest)]
  (xcljb.conn-internal/send conn1813 request-struct1814)))

(clojure.core/defn
 change-keyboard-mapping
 [conn1815 keycode-count first-keycode keysyms-per-keycode keysyms]
 (clojure.core/let
  [request-struct1816
   (xcljb.gen.xproto-types/->ChangeKeyboardMappingRequest
    keycode-count
    first-keycode
    keysyms-per-keycode
    keysyms)]
  (xcljb.conn-internal/send conn1815 request-struct1816)))

(clojure.core/defn
 get-keyboard-mapping
 [conn1817 first-keycode count]
 (clojure.core/let
  [request-struct1818
   (xcljb.gen.xproto-types/->GetKeyboardMappingRequest
    first-keycode
    count)]
  (xcljb.conn-internal/send conn1817 request-struct1818)))

(clojure.core/defn
 change-keyboard-control
 [conn1819 value]
 (clojure.core/let
  [request-struct1820
   (xcljb.gen.xproto-types/->ChangeKeyboardControlRequest value)]
  (xcljb.conn-internal/send conn1819 request-struct1820)))

(clojure.core/defn
 get-keyboard-control
 [conn1821]
 (clojure.core/let
  [request-struct1822
   (xcljb.gen.xproto-types/->GetKeyboardControlRequest)]
  (xcljb.conn-internal/send conn1821 request-struct1822)))

(clojure.core/defn
 bell
 [conn1823 percent]
 (clojure.core/let
  [request-struct1824 (xcljb.gen.xproto-types/->BellRequest percent)]
  (xcljb.conn-internal/send conn1823 request-struct1824)))

(clojure.core/defn
 change-pointer-control
 [conn1825
  acceleration-numerator
  acceleration-denominator
  threshold
  do-acceleration
  do-threshold]
 (clojure.core/let
  [request-struct1826
   (xcljb.gen.xproto-types/->ChangePointerControlRequest
    acceleration-numerator
    acceleration-denominator
    threshold
    do-acceleration
    do-threshold)]
  (xcljb.conn-internal/send conn1825 request-struct1826)))

(clojure.core/defn
 get-pointer-control
 [conn1827]
 (clojure.core/let
  [request-struct1828
   (xcljb.gen.xproto-types/->GetPointerControlRequest)]
  (xcljb.conn-internal/send conn1827 request-struct1828)))

(clojure.core/defn
 set-screen-saver
 [conn1829 timeout interval prefer-blanking allow-exposures]
 (clojure.core/let
  [request-struct1830
   (xcljb.gen.xproto-types/->SetScreenSaverRequest
    timeout
    interval
    prefer-blanking
    allow-exposures)]
  (xcljb.conn-internal/send conn1829 request-struct1830)))

(clojure.core/defn
 get-screen-saver
 [conn1831]
 (clojure.core/let
  [request-struct1832 (xcljb.gen.xproto-types/->GetScreenSaverRequest)]
  (xcljb.conn-internal/send conn1831 request-struct1832)))

(clojure.core/defn
 change-hosts
 [conn1833 mode family address-len address]
 (clojure.core/let
  [request-struct1834
   (xcljb.gen.xproto-types/->ChangeHostsRequest
    mode
    family
    address-len
    address)]
  (xcljb.conn-internal/send conn1833 request-struct1834)))

(clojure.core/defn
 list-hosts
 [conn1835]
 (clojure.core/let
  [request-struct1836 (xcljb.gen.xproto-types/->ListHostsRequest)]
  (xcljb.conn-internal/send conn1835 request-struct1836)))

(clojure.core/defn
 set-access-control
 [conn1837 mode]
 (clojure.core/let
  [request-struct1838
   (xcljb.gen.xproto-types/->SetAccessControlRequest mode)]
  (xcljb.conn-internal/send conn1837 request-struct1838)))

(clojure.core/defn
 set-close-down-mode
 [conn1839 mode]
 (clojure.core/let
  [request-struct1840
   (xcljb.gen.xproto-types/->SetCloseDownModeRequest mode)]
  (xcljb.conn-internal/send conn1839 request-struct1840)))

(clojure.core/defn
 kill-client
 [conn1841 resource]
 (clojure.core/let
  [request-struct1842
   (xcljb.gen.xproto-types/->KillClientRequest resource)]
  (xcljb.conn-internal/send conn1841 request-struct1842)))

(clojure.core/defn
 rotate-properties
 [conn1843 window atoms-len delta atoms]
 (clojure.core/let
  [request-struct1844
   (xcljb.gen.xproto-types/->RotatePropertiesRequest
    window
    atoms-len
    delta
    atoms)]
  (xcljb.conn-internal/send conn1843 request-struct1844)))

(clojure.core/defn
 force-screen-saver
 [conn1845 mode]
 (clojure.core/let
  [request-struct1846
   (xcljb.gen.xproto-types/->ForceScreenSaverRequest mode)]
  (xcljb.conn-internal/send conn1845 request-struct1846)))

(clojure.core/defn
 set-pointer-mapping
 [conn1847 map-len map]
 (clojure.core/let
  [request-struct1848
   (xcljb.gen.xproto-types/->SetPointerMappingRequest map-len map)]
  (xcljb.conn-internal/send conn1847 request-struct1848)))

(clojure.core/defn
 get-pointer-mapping
 [conn1849]
 (clojure.core/let
  [request-struct1850
   (xcljb.gen.xproto-types/->GetPointerMappingRequest)]
  (xcljb.conn-internal/send conn1849 request-struct1850)))

(clojure.core/defn
 set-modifier-mapping
 [conn1851 keycodes-per-modifier keycodes]
 (clojure.core/let
  [request-struct1852
   (xcljb.gen.xproto-types/->SetModifierMappingRequest
    keycodes-per-modifier
    keycodes)]
  (xcljb.conn-internal/send conn1851 request-struct1852)))

(clojure.core/defn
 get-modifier-mapping
 [conn1853]
 (clojure.core/let
  [request-struct1854
   (xcljb.gen.xproto-types/->GetModifierMappingRequest)]
  (xcljb.conn-internal/send conn1853 request-struct1854)))

(clojure.core/defn
 no-operation
 [conn1855]
 (clojure.core/let
  [request-struct1856 (xcljb.gen.xproto-types/->NoOperationRequest)]
  (xcljb.conn-internal/send conn1855 request-struct1856)))

;;; Manually written.

(clojure.core/defn
 query-text-extents
 [conn__1325__auto__ font__1326__auto__ string__1327__auto__]
 (xcljb.conn-internal/send
  conn__1325__auto__
  (xcljb.gen.xproto-types/->QueryTextExtentsRequest
   font__1326__auto__
   string__1327__auto__)))

(clojure.core/defn
 configure-window
 [conn__1304__auto__ window__1305__auto__ value__1306__auto__]
 (xcljb.conn-internal/send
  conn__1304__auto__
  (xcljb.gen.xproto-types/->ConfigureWindowRequest
   window__1305__auto__
   value__1306__auto__)))
