;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xproto
 (:require xcljb.conn-internal xcljb.gen.xproto-types))

(def
 -XCLJB
 {:minor-version nil,
  :major-version nil,
  :header "xproto",
  :extension-multiword false,
  :extension-name nil,
  :extension-xname nil})

(def BUTTON-INDEX {:5 5, :4 4, :3 3, :2 2, :1 1, :any 0})

(def MAPPING-STATUS {:failure 2, :busy 1, :success 0})

(def CLIP-ORDERING {:yxbanded 3, :yxsorted 2, :ysorted 1, :unsorted 0})

(def CIRCULATE {:lower-highest 1, :raise-lowest 0})

(def BACK-PIXMAP {:parent-relative 1, :none 0})

(def
 FAMILY
 {:internet6 6,
  :server-interpreted 5,
  :chaos 2,
  :decnet 1,
  :internet 0})

(def SET-MODE {:delete 1, :insert 0})

(def GET-PROPERTY-TYPE {:any 0})

(def BACKING-STORE {:always 2, :when-mapped 1, :not-useful 0})

(def
 EVENT-MASK
 {:pointer-motion-hint 128,
  :property-change 4194304,
  :pointer-motion 64,
  :leave-window 32,
  :focus-change 2097152,
  :button4motion 2048,
  :substructure-redirect 1048576,
  :keymap-state 16384,
  :button3motion 1024,
  :no-event 0,
  :structure-notify 131072,
  :button1motion 256,
  :button-motion 8192,
  :color-map-change 8388608,
  :button-release 8,
  :key-press 1,
  :button-press 4,
  :resize-redirect 262144,
  :exposure 32768,
  :owner-grab-button 16777216,
  :button5motion 4096,
  :enter-window 16,
  :visibility-change 65536,
  :button2motion 512,
  :substructure-notify 524288,
  :key-release 2})

(def PROP-MODE {:append 2, :prepend 1, :replace 0})

(def PLACE {:on-bottom 1, :on-top 0})

(def JOIN-STYLE {:bevel 2, :round 1, :miter 0})

(def WINDOW-CLASS {:input-only 2, :input-output 1, :copy-from-parent 0})

(def SCREEN-SAVER {:active 1, :reset 0})

(def
 ALLOW
 {:sync-both 7,
  :async-both 6,
  :replay-keyboard 5,
  :sync-keyboard 4,
  :async-keyboard 3,
  :replay-pointer 2,
  :sync-pointer 1,
  :async-pointer 0})

(def
 STACK-MODE
 {:opposite 4, :bottom-if 3, :top-if 2, :below 1, :above 0})

(def HOST-MODE {:delete 1, :insert 0})

(def EXPOSURES {:default 2, :allowed 1, :not-allowed 0})

(def NOTIFY-MODE {:while-grabbed 3, :ungrab 2, :grab 1, :normal 0})

(def GRAB {:any 0})

(def AUTO-REPEAT-MODE {:default 2, :on 1, :off 0})

(def TIME {:current-time 0})

(def MAPPING {:pointer 2, :keyboard 1, :modifier 0})

(def
 MOD-MASK
 {:any 32768,
  :5 128,
  :4 64,
  :3 32,
  :2 16,
  :1 8,
  :control 4,
  :lock 2,
  :shift 1})

(def
 KEY-BUT-MASK
 {:mod4 64,
  :button3 1024,
  :lock 2,
  :button2 512,
  :button5 4096,
  :button4 2048,
  :control 4,
  :button1 256,
  :mod1 8,
  :shift 1,
  :mod3 32,
  :mod2 16,
  :mod5 128})

(def FILL-STYLE {:opaque-stippled 3, :stippled 2, :tiled 1, :solid 0})

(def
 GRAVITY
 {:win-unmap 0,
  :bit-forget 0,
  :west 4,
  :south-west 7,
  :north-east 3,
  :static 10,
  :center 5,
  :north 2,
  :south 8,
  :north-west 1,
  :east 6,
  :south-east 9})

(def LED-MODE {:on 1, :off 0})

(def BLANKING {:default 2, :preferred 1, :not-preferred 0})

(def
 INPUT-FOCUS
 {:follow-keyboard 3, :parent 2, :pointer-root 1, :none 0})

(def FONT {:none 0})

(def COLOR-FLAG {:blue 4, :green 2, :red 1})

(def GRAB-MODE {:async 1, :sync 0})

(def WINDOW {:none 0})

(def
 QUERY-SHAPE-OF
 {:fastest-stipple 2, :fastest-tile 1, :largest-cursor 0})

(def
 GX
 {:and-inverted 4,
  :nand 14,
  :or-reverse 11,
  :equiv 9,
  :or 7,
  :set 15,
  :noop 5,
  :xor 6,
  :invert 10,
  :and-reverse 2,
  :and 1,
  :nor 8,
  :or-inverted 13,
  :clear 0,
  :copy-inverted 12,
  :copy 3})

(def
 ATOM
 {:rgb-gray-map 28,
  :rgb-color-map 24,
  :superscript-y 48,
  :resolution 60,
  :wm-class 67,
  :quad-width 57,
  :end-space 46,
  :wm-zoom-hints 42,
  :wm-hints 35,
  :bitmap 5,
  :wm-icon-name 37,
  :string 31,
  :point 21,
  :max-space 45,
  :copyright 61,
  :pixmap 20,
  :rgb-green-map 29,
  :weight 58,
  :subscript-x 49,
  :subscript-y 50,
  :underline-position 51,
  :full-name 65,
  :norm-space 44,
  :cut-buffer1 10,
  :visualid 32,
  :cut-buffer2 11,
  :underline-thickness 52,
  :integer 19,
  :cut-buffer0 9,
  :notice 62,
  :strikeout-ascent 53,
  :any 0,
  :cursor 8,
  :cut-buffer6 15,
  :cut-buffer7 16,
  :wm-size-hints 41,
  :cut-buffer5 14,
  :cut-buffer4 13,
  :wm-command 34,
  :resource-manager 23,
  :family-name 64,
  :rgb-blue-map 26,
  :cap-height 66,
  :cut-buffer3 12,
  :primary 1,
  :rectangle 22,
  :wm-client-machine 36,
  :atom 4,
  :x-height 56,
  :rgb-default-map 27,
  :wm-icon-size 38,
  :point-size 59,
  :drawable 17,
  :arc 3,
  :none 0,
  :min-space 43,
  :italic-angle 55,
  :rgb-red-map 30,
  :cardinal 6,
  :secondary 2,
  :font-name 63,
  :strikeout-descent 54,
  :wm-name 39,
  :font 18,
  :wm-transient-for 68,
  :superscript-x 47,
  :window 33,
  :wm-normal-hints 40,
  :colormap 7,
  :rgb-best-map 25})

(def IMAGE-FORMAT {:zpixmap 2, :xypixmap 1, :xybitmap 0})

(def
 CONFIG-WINDOW
 {:stack-mode 64,
  :sibling 32,
  :border-width 16,
  :height 8,
  :width 4,
  :y 2,
  :x 1})

(def
 VISIBILITY
 {:fully-obscured 2, :partially-obscured 1, :unobscured 0})

(def FONT-DRAW {:right-to-left 1, :left-to-right 0})

(def IMAGE-ORDER {:msbfirst 1, :lsbfirst 0})

(def SUBWINDOW-MODE {:include-inferiors 1, :clip-by-children 0})

(def
 CW
 {:border-pixel 8,
  :backing-store 64,
  :win-gravity 32,
  :backing-planes 128,
  :bit-gravity 16,
  :save-under 1024,
  :override-redirect 512,
  :event-mask 2048,
  :cursor 16384,
  :dont-propagate 4096,
  :backing-pixel 256,
  :back-pixmap 1,
  :border-pixmap 4,
  :back-pixel 2,
  :colormap 8192})

(def SEND-EVENT-DEST {:item-focus 1, :pointer-window 0})

(def MAP-STATE {:viewable 2, :unviewable 1, :unmapped 0})

(def PROPERTY {:delete 1, :new-value 0})

(def ARC-MODE {:pie-slice 1, :chord 0})

(def POLY-SHAPE {:convex 2, :nonconvex 1, :complex 0})

(def
 MAP-INDEX
 {:5 7, :4 6, :3 5, :2 4, :1 3, :control 2, :lock 1, :shift 0})

(def CURSOR {:none 0})

(def MOTION {:hint 1, :normal 0})

(def
 KB
 {:auto-repeat-mode 128,
  :key 64,
  :led-mode 32,
  :led 16,
  :bell-duration 8,
  :bell-pitch 4,
  :bell-percent 2,
  :key-click-percent 1})

(def COLORMAP-STATE {:installed 1, :uninstalled 0})

(def
 VISUAL-CLASS
 {:direct-color 5,
  :true-color 4,
  :pseudo-color 3,
  :static-color 2,
  :gray-scale 1,
  :static-gray 0})

(def COORD-MODE {:previous 1, :origin 0})

(def ACCESS-CONTROL {:enable 1, :disable 0})

(def COLORMAP {:none 0})

(def
 NOTIFY-DETAIL
 {:none 7,
  :pointer-root 6,
  :pointer 5,
  :nonlinear-virtual 4,
  :nonlinear 3,
  :inferior 2,
  :virtual 1,
  :ancestor 0})

(def
 CLOSE-DOWN
 {:retain-temporary 2, :retain-permanent 1, :destroy-all 0})

(def
 GC
 {:line-style 32,
  :line-width 16,
  :tile 1024,
  :background 8,
  :dash-offset 1048576,
  :foreground 4,
  :dash-list 2097152,
  :graphics-exposures 65536,
  :fill-style 256,
  :plane-mask 2,
  :arc-mode 4194304,
  :function 1,
  :clip-origin-x 131072,
  :clip-origin-y 262144,
  :fill-rule 512,
  :stipple 2048,
  :cap-style 64,
  :subwindow-mode 32768,
  :clip-mask 524288,
  :join-style 128,
  :font 16384,
  :tile-stipple-origin-x 4096,
  :tile-stipple-origin-y 8192})

(def COLORMAP-ALLOC {:all 1, :none 0})

(def LINE-STYLE {:double-dash 2, :on-off-dash 1, :solid 0})

(def PIXMAP {:none 0})

(def
 BUTTON-MASK
 {:any 32768, :5 4096, :4 2048, :3 1024, :2 512, :1 256})

(def
 GRAB-STATUS
 {:frozen 4,
  :not-viewable 3,
  :invalid-time 2,
  :already-grabbed 1,
  :success 0})

(def KILL {:all-temporary 0})

(def CAP-STYLE {:projecting 3, :round 2, :butt 1, :not-last 0})

(def FILL-RULE {:winding 1, :even-odd 0})

(clojure.core/defn
 create-window
 [conn
  depth
  wid
  parent
  x
  y
  width
  height
  border-width
  class
  visual
  value]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:depth
     :wid
     :parent
     :x
     :y
     :width
     :height
     :border-width
     :class
     :visual
     :value]
    [depth
     wid
     parent
     x
     y
     width
     height
     border-width
     class
     visual
     value])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CreateWindowRequest
   request)))

(clojure.core/defn
 change-window-attributes
 [conn window value]
 (clojure.core/let
  [request (clojure.core/zipmap [:window :value] [window value])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeWindowAttributesRequest
   request)))

(clojure.core/defn
 get-window-attributes
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetWindowAttributesRequest
   request)))

(clojure.core/defn
 destroy-window
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/DestroyWindowRequest
   request)))

(clojure.core/defn
 destroy-subwindows
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/DestroySubwindowsRequest
   request)))

(clojure.core/defn
 change-save-set
 [conn mode window]
 (clojure.core/let
  [request (clojure.core/zipmap [:mode :window] [mode window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeSaveSetRequest
   request)))

(clojure.core/defn
 reparent-window
 [conn window parent x y]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:window :parent :x :y] [window parent x y])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ReparentWindowRequest
   request)))

(clojure.core/defn
 map-window
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/MapWindowRequest
   request)))

(clojure.core/defn
 map-subwindows
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/MapSubwindowsRequest
   request)))

(clojure.core/defn
 unmap-window
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UnmapWindowRequest
   request)))

(clojure.core/defn
 unmap-subwindows
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UnmapSubwindowsRequest
   request)))

(clojure.core/defn
 circulate-window
 [conn direction window]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:direction :window] [direction window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CirculateWindowRequest
   request)))

(clojure.core/defn
 get-geometry
 [conn drawable]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable] [drawable])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetGeometryRequest
   request)))

(clojure.core/defn
 query-tree
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryTreeRequest
   request)))

(clojure.core/defn
 intern-atom
 [conn only-if-exists name-len name]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:only-if-exists :name-len :name]
    [only-if-exists name-len name])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/InternAtomRequest
   request)))

(clojure.core/defn
 get-atom-name
 [conn atom]
 (clojure.core/let
  [request (clojure.core/zipmap [:atom] [atom])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetAtomNameRequest
   request)))

(clojure.core/defn
 change-property
 [conn mode window property type format data-len data]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:mode :window :property :type :format :data-len :data]
    [mode window property type format data-len data])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangePropertyRequest
   request)))

(clojure.core/defn
 delete-property
 [conn window property]
 (clojure.core/let
  [request (clojure.core/zipmap [:window :property] [window property])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/DeletePropertyRequest
   request)))

(clojure.core/defn
 get-property
 [conn delete window property type long-offset long-length]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:delete :window :property :type :long-offset :long-length]
    [delete window property type long-offset long-length])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetPropertyRequest
   request)))

(clojure.core/defn
 list-properties
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ListPropertiesRequest
   request)))

(clojure.core/defn
 set-selection-owner
 [conn owner selection time]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:owner :selection :time]
    [owner selection time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetSelectionOwnerRequest
   request)))

(clojure.core/defn
 get-selection-owner
 [conn selection]
 (clojure.core/let
  [request (clojure.core/zipmap [:selection] [selection])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetSelectionOwnerRequest
   request)))

(clojure.core/defn
 convert-selection
 [conn requestor selection target property time]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:requestor :selection :target :property :time]
    [requestor selection target property time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ConvertSelectionRequest
   request)))

(clojure.core/defn
 send-event
 [conn propagate destination event-mask event]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:propagate :destination :event-mask :event]
    [propagate destination event-mask event])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SendEventRequest
   request)))

(clojure.core/defn
 grab-pointer
 [conn
  owner-events
  grab-window
  event-mask
  pointer-mode
  keyboard-mode
  confine-to
  cursor
  time]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:owner-events
     :grab-window
     :event-mask
     :pointer-mode
     :keyboard-mode
     :confine-to
     :cursor
     :time]
    [owner-events
     grab-window
     event-mask
     pointer-mode
     keyboard-mode
     confine-to
     cursor
     time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GrabPointerRequest
   request)))

(clojure.core/defn
 ungrab-pointer
 [conn time]
 (clojure.core/let
  [request (clojure.core/zipmap [:time] [time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UngrabPointerRequest
   request)))

(clojure.core/defn
 grab-button
 [conn
  owner-events
  grab-window
  event-mask
  pointer-mode
  keyboard-mode
  confine-to
  cursor
  button
  modifiers]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:owner-events
     :grab-window
     :event-mask
     :pointer-mode
     :keyboard-mode
     :confine-to
     :cursor
     :button
     :modifiers]
    [owner-events
     grab-window
     event-mask
     pointer-mode
     keyboard-mode
     confine-to
     cursor
     button
     modifiers])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GrabButtonRequest
   request)))

(clojure.core/defn
 ungrab-button
 [conn button grab-window modifiers]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:button :grab-window :modifiers]
    [button grab-window modifiers])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UngrabButtonRequest
   request)))

(clojure.core/defn
 change-active-pointer-grab
 [conn cursor time event-mask]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:cursor :time :event-mask]
    [cursor time event-mask])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeActivePointerGrabRequest
   request)))

(clojure.core/defn
 grab-keyboard
 [conn owner-events grab-window time pointer-mode keyboard-mode]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:owner-events :grab-window :time :pointer-mode :keyboard-mode]
    [owner-events grab-window time pointer-mode keyboard-mode])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GrabKeyboardRequest
   request)))

(clojure.core/defn
 ungrab-keyboard
 [conn time]
 (clojure.core/let
  [request (clojure.core/zipmap [:time] [time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UngrabKeyboardRequest
   request)))

(clojure.core/defn
 grab-key
 [conn
  owner-events
  grab-window
  modifiers
  key
  pointer-mode
  keyboard-mode]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:owner-events
     :grab-window
     :modifiers
     :key
     :pointer-mode
     :keyboard-mode]
    [owner-events
     grab-window
     modifiers
     key
     pointer-mode
     keyboard-mode])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GrabKeyRequest
   request)))

(clojure.core/defn
 ungrab-key
 [conn key grab-window modifiers]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:key :grab-window :modifiers]
    [key grab-window modifiers])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UngrabKeyRequest
   request)))

(clojure.core/defn
 allow-events
 [conn mode time]
 (clojure.core/let
  [request (clojure.core/zipmap [:mode :time] [mode time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/AllowEventsRequest
   request)))

(clojure.core/defn
 grab-server
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GrabServerRequest
   request)))

(clojure.core/defn
 ungrab-server
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UngrabServerRequest
   request)))

(clojure.core/defn
 query-pointer
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryPointerRequest
   request)))

(clojure.core/defn
 get-motion-events
 [conn window start stop]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:window :start :stop] [window start stop])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetMotionEventsRequest
   request)))

(clojure.core/defn
 translate-coordinates
 [conn src-window dst-window src-x src-y]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:src-window :dst-window :src-x :src-y]
    [src-window dst-window src-x src-y])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/TranslateCoordinatesRequest
   request)))

(clojure.core/defn
 warp-pointer
 [conn
  src-window
  dst-window
  src-x
  src-y
  src-width
  src-height
  dst-x
  dst-y]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:src-window
     :dst-window
     :src-x
     :src-y
     :src-width
     :src-height
     :dst-x
     :dst-y]
    [src-window
     dst-window
     src-x
     src-y
     src-width
     src-height
     dst-x
     dst-y])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/WarpPointerRequest
   request)))

(clojure.core/defn
 set-input-focus
 [conn revert-to focus time]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:revert-to :focus :time]
    [revert-to focus time])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetInputFocusRequest
   request)))

(clojure.core/defn
 get-input-focus
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetInputFocusRequest
   request)))

(clojure.core/defn
 query-keymap
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryKeymapRequest
   request)))

(clojure.core/defn
 open-font
 [conn fid name-len name]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:fid :name-len :name] [fid name-len name])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/OpenFontRequest
   request)))

(clojure.core/defn
 close-font
 [conn font]
 (clojure.core/let
  [request (clojure.core/zipmap [:font] [font])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CloseFontRequest
   request)))

(clojure.core/defn
 query-font
 [conn font]
 (clojure.core/let
  [request (clojure.core/zipmap [:font] [font])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryFontRequest
   request)))

(clojure.core/defn
 list-fonts
 [conn max-names pattern-len pattern]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:max-names :pattern-len :pattern]
    [max-names pattern-len pattern])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ListFontsRequest
   request)))

(clojure.core/defn
 list-fonts-with-info
 [conn max-names pattern-len pattern]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:max-names :pattern-len :pattern]
    [max-names pattern-len pattern])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ListFontsWithInfoRequest
   request)))

(clojure.core/defn
 set-font-path
 [conn font-qty font]
 (clojure.core/let
  [request (clojure.core/zipmap [:font-qty :font] [font-qty font])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetFontPathRequest
   request)))

(clojure.core/defn
 get-font-path
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetFontPathRequest
   request)))

(clojure.core/defn
 create-pixmap
 [conn depth pid drawable width height]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:depth :pid :drawable :width :height]
    [depth pid drawable width height])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CreatePixmapRequest
   request)))

(clojure.core/defn
 free-pixmap
 [conn pixmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:pixmap] [pixmap])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/FreePixmapRequest
   request)))

(clojure.core/defn
 create-gc
 [conn cid drawable value]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:cid :drawable :value] [cid drawable value])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CreateGCRequest
   request)))

(clojure.core/defn
 change-gc
 [conn gc value]
 (clojure.core/let
  [request (clojure.core/zipmap [:gc :value] [gc value])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeGCRequest
   request)))

(clojure.core/defn
 copy-gc
 [conn src-gc dst-gc value-mask]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:src-gc :dst-gc :value-mask]
    [src-gc dst-gc value-mask])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CopyGCRequest
   request)))

(clojure.core/defn
 set-dashes
 [conn gc dash-offset dashes-len dashes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:gc :dash-offset :dashes-len :dashes]
    [gc dash-offset dashes-len dashes])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetDashesRequest
   request)))

(clojure.core/defn
 set-clip-rectangles
 [conn ordering gc clip-x-origin clip-y-origin rectangles]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:ordering :gc :clip-x-origin :clip-y-origin :rectangles]
    [ordering gc clip-x-origin clip-y-origin rectangles])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetClipRectanglesRequest
   request)))

(clojure.core/defn
 free-gc
 [conn gc]
 (clojure.core/let
  [request (clojure.core/zipmap [:gc] [gc])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/FreeGCRequest
   request)))

(clojure.core/defn
 clear-area
 [conn exposures window x y width height]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:exposures :window :x :y :width :height]
    [exposures window x y width height])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ClearAreaRequest
   request)))

(clojure.core/defn
 copy-area
 [conn
  src-drawable
  dst-drawable
  gc
  src-x
  src-y
  dst-x
  dst-y
  width
  height]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:src-drawable
     :dst-drawable
     :gc
     :src-x
     :src-y
     :dst-x
     :dst-y
     :width
     :height]
    [src-drawable
     dst-drawable
     gc
     src-x
     src-y
     dst-x
     dst-y
     width
     height])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CopyAreaRequest
   request)))

(clojure.core/defn
 copy-plane
 [conn
  src-drawable
  dst-drawable
  gc
  src-x
  src-y
  dst-x
  dst-y
  width
  height
  bit-plane]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:src-drawable
     :dst-drawable
     :gc
     :src-x
     :src-y
     :dst-x
     :dst-y
     :width
     :height
     :bit-plane]
    [src-drawable
     dst-drawable
     gc
     src-x
     src-y
     dst-x
     dst-y
     width
     height
     bit-plane])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CopyPlaneRequest
   request)))

(clojure.core/defn
 poly-point
 [conn coordinate-mode drawable gc points]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:coordinate-mode :drawable :gc :points]
    [coordinate-mode drawable gc points])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyPointRequest
   request)))

(clojure.core/defn
 poly-line
 [conn coordinate-mode drawable gc points]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:coordinate-mode :drawable :gc :points]
    [coordinate-mode drawable gc points])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyLineRequest
   request)))

(clojure.core/defn
 poly-segment
 [conn drawable gc segments]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :gc :segments]
    [drawable gc segments])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolySegmentRequest
   request)))

(clojure.core/defn
 poly-rectangle
 [conn drawable gc rectangles]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :gc :rectangles]
    [drawable gc rectangles])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyRectangleRequest
   request)))

(clojure.core/defn
 poly-arc
 [conn drawable gc arcs]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:drawable :gc :arcs] [drawable gc arcs])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyArcRequest
   request)))

(clojure.core/defn
 fill-poly
 [conn drawable gc shape coordinate-mode points]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :gc :shape :coordinate-mode :points]
    [drawable gc shape coordinate-mode points])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/FillPolyRequest
   request)))

(clojure.core/defn
 poly-fill-rectangle
 [conn drawable gc rectangles]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :gc :rectangles]
    [drawable gc rectangles])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyFillRectangleRequest
   request)))

(clojure.core/defn
 poly-fill-arc
 [conn drawable gc arcs]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:drawable :gc :arcs] [drawable gc arcs])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyFillArcRequest
   request)))

(clojure.core/defn
 put-image
 [conn format drawable gc width height dst-x dst-y left-pad depth data]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:format
     :drawable
     :gc
     :width
     :height
     :dst-x
     :dst-y
     :left-pad
     :depth
     :data]
    [format drawable gc width height dst-x dst-y left-pad depth data])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PutImageRequest
   request)))

(clojure.core/defn
 get-image
 [conn format drawable x y width height plane-mask]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:format :drawable :x :y :width :height :plane-mask]
    [format drawable x y width height plane-mask])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetImageRequest
   request)))

(clojure.core/defn
 poly-text8
 [conn drawable gc x y items]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :gc :x :y :items]
    [drawable gc x y items])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyText8Request
   request)))

(clojure.core/defn
 poly-text16
 [conn drawable gc x y items]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :gc :x :y :items]
    [drawable gc x y items])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/PolyText16Request
   request)))

(clojure.core/defn
 image-text8
 [conn string-len drawable gc x y string]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:string-len :drawable :gc :x :y :string]
    [string-len drawable gc x y string])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ImageText8Request
   request)))

(clojure.core/defn
 image-text16
 [conn string-len drawable gc x y string]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:string-len :drawable :gc :x :y :string]
    [string-len drawable gc x y string])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ImageText16Request
   request)))

(clojure.core/defn
 create-colormap
 [conn alloc mid window visual]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:alloc :mid :window :visual]
    [alloc mid window visual])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CreateColormapRequest
   request)))

(clojure.core/defn
 free-colormap
 [conn cmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:cmap] [cmap])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/FreeColormapRequest
   request)))

(clojure.core/defn
 copy-colormap-and-free
 [conn mid src-cmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:mid :src-cmap] [mid src-cmap])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CopyColormapAndFreeRequest
   request)))

(clojure.core/defn
 install-colormap
 [conn cmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:cmap] [cmap])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/InstallColormapRequest
   request)))

(clojure.core/defn
 uninstall-colormap
 [conn cmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:cmap] [cmap])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/UninstallColormapRequest
   request)))

(clojure.core/defn
 list-installed-colormaps
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ListInstalledColormapsRequest
   request)))

(clojure.core/defn
 alloc-color
 [conn cmap red green blue]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:cmap :red :green :blue]
    [cmap red green blue])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/AllocColorRequest
   request)))

(clojure.core/defn
 alloc-named-color
 [conn cmap name-len name]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:cmap :name-len :name] [cmap name-len name])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/AllocNamedColorRequest
   request)))

(clojure.core/defn
 alloc-color-cells
 [conn contiguous cmap colors planes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:contiguous :cmap :colors :planes]
    [contiguous cmap colors planes])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/AllocColorCellsRequest
   request)))

(clojure.core/defn
 alloc-color-planes
 [conn contiguous cmap colors reds greens blues]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:contiguous :cmap :colors :reds :greens :blues]
    [contiguous cmap colors reds greens blues])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/AllocColorPlanesRequest
   request)))

(clojure.core/defn
 free-colors
 [conn cmap plane-mask pixels]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:cmap :plane-mask :pixels]
    [cmap plane-mask pixels])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/FreeColorsRequest
   request)))

(clojure.core/defn
 store-colors
 [conn cmap items]
 (clojure.core/let
  [request (clojure.core/zipmap [:cmap :items] [cmap items])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/StoreColorsRequest
   request)))

(clojure.core/defn
 store-named-color
 [conn flags cmap pixel name-len name]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:flags :cmap :pixel :name-len :name]
    [flags cmap pixel name-len name])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/StoreNamedColorRequest
   request)))

(clojure.core/defn
 query-colors
 [conn cmap pixels]
 (clojure.core/let
  [request (clojure.core/zipmap [:cmap :pixels] [cmap pixels])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryColorsRequest
   request)))

(clojure.core/defn
 lookup-color
 [conn cmap name-len name]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:cmap :name-len :name] [cmap name-len name])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/LookupColorRequest
   request)))

(clojure.core/defn
 create-cursor
 [conn
  cid
  source
  mask
  fore-red
  fore-green
  fore-blue
  back-red
  back-green
  back-blue
  x
  y]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:cid
     :source
     :mask
     :fore-red
     :fore-green
     :fore-blue
     :back-red
     :back-green
     :back-blue
     :x
     :y]
    [cid
     source
     mask
     fore-red
     fore-green
     fore-blue
     back-red
     back-green
     back-blue
     x
     y])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CreateCursorRequest
   request)))

(clojure.core/defn
 create-glyph-cursor
 [conn
  cid
  source-font
  mask-font
  source-char
  mask-char
  fore-red
  fore-green
  fore-blue
  back-red
  back-green
  back-blue]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:cid
     :source-font
     :mask-font
     :source-char
     :mask-char
     :fore-red
     :fore-green
     :fore-blue
     :back-red
     :back-green
     :back-blue]
    [cid
     source-font
     mask-font
     source-char
     mask-char
     fore-red
     fore-green
     fore-blue
     back-red
     back-green
     back-blue])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/CreateGlyphCursorRequest
   request)))

(clojure.core/defn
 free-cursor
 [conn cursor]
 (clojure.core/let
  [request (clojure.core/zipmap [:cursor] [cursor])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/FreeCursorRequest
   request)))

(clojure.core/defn
 recolor-cursor
 [conn
  cursor
  fore-red
  fore-green
  fore-blue
  back-red
  back-green
  back-blue]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:cursor
     :fore-red
     :fore-green
     :fore-blue
     :back-red
     :back-green
     :back-blue]
    [cursor
     fore-red
     fore-green
     fore-blue
     back-red
     back-green
     back-blue])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/RecolorCursorRequest
   request)))

(clojure.core/defn
 query-best-size
 [conn class drawable width height]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:class :drawable :width :height]
    [class drawable width height])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryBestSizeRequest
   request)))

(clojure.core/defn
 query-extension
 [conn name-len name]
 (clojure.core/let
  [request (clojure.core/zipmap [:name-len :name] [name-len name])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/QueryExtensionRequest
   request)))

(clojure.core/defn
 list-extensions
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ListExtensionsRequest
   request)))

(clojure.core/defn
 change-keyboard-mapping
 [conn keycode-count first-keycode keysyms-per-keycode keysyms]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:keycode-count :first-keycode :keysyms-per-keycode :keysyms]
    [keycode-count first-keycode keysyms-per-keycode keysyms])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeKeyboardMappingRequest
   request)))

(clojure.core/defn
 get-keyboard-mapping
 [conn first-keycode count]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:first-keycode :count] [first-keycode count])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetKeyboardMappingRequest
   request)))

(clojure.core/defn
 change-keyboard-control
 [conn value]
 (clojure.core/let
  [request (clojure.core/zipmap [:value] [value])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeKeyboardControlRequest
   request)))

(clojure.core/defn
 get-keyboard-control
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetKeyboardControlRequest
   request)))

(clojure.core/defn
 bell
 [conn percent]
 (clojure.core/let
  [request (clojure.core/zipmap [:percent] [percent])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/BellRequest
   request)))

(clojure.core/defn
 change-pointer-control
 [conn
  acceleration-numerator
  acceleration-denominator
  threshold
  do-acceleration
  do-threshold]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:acceleration-numerator
     :acceleration-denominator
     :threshold
     :do-acceleration
     :do-threshold]
    [acceleration-numerator
     acceleration-denominator
     threshold
     do-acceleration
     do-threshold])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangePointerControlRequest
   request)))

(clojure.core/defn
 get-pointer-control
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetPointerControlRequest
   request)))

(clojure.core/defn
 set-screen-saver
 [conn timeout interval prefer-blanking allow-exposures]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:timeout :interval :prefer-blanking :allow-exposures]
    [timeout interval prefer-blanking allow-exposures])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetScreenSaverRequest
   request)))

(clojure.core/defn
 get-screen-saver
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetScreenSaverRequest
   request)))

(clojure.core/defn
 change-hosts
 [conn mode family address-len address]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:mode :family :address-len :address]
    [mode family address-len address])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ChangeHostsRequest
   request)))

(clojure.core/defn
 list-hosts
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ListHostsRequest
   request)))

(clojure.core/defn
 set-access-control
 [conn mode]
 (clojure.core/let
  [request (clojure.core/zipmap [:mode] [mode])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetAccessControlRequest
   request)))

(clojure.core/defn
 set-close-down-mode
 [conn mode]
 (clojure.core/let
  [request (clojure.core/zipmap [:mode] [mode])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetCloseDownModeRequest
   request)))

(clojure.core/defn
 kill-client
 [conn resource]
 (clojure.core/let
  [request (clojure.core/zipmap [:resource] [resource])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/KillClientRequest
   request)))

(clojure.core/defn
 rotate-properties
 [conn window atoms-len delta atoms]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:window :atoms-len :delta :atoms]
    [window atoms-len delta atoms])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/RotatePropertiesRequest
   request)))

(clojure.core/defn
 force-screen-saver
 [conn mode]
 (clojure.core/let
  [request (clojure.core/zipmap [:mode] [mode])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/ForceScreenSaverRequest
   request)))

(clojure.core/defn
 set-pointer-mapping
 [conn map-len map]
 (clojure.core/let
  [request (clojure.core/zipmap [:map-len :map] [map-len map])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetPointerMappingRequest
   request)))

(clojure.core/defn
 get-pointer-mapping
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetPointerMappingRequest
   request)))

(clojure.core/defn
 set-modifier-mapping
 [conn keycodes-per-modifier keycodes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:keycodes-per-modifier :keycodes]
    [keycodes-per-modifier keycodes])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/SetModifierMappingRequest
   request)))

(clojure.core/defn
 get-modifier-mapping
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/GetModifierMappingRequest
   request)))

(clojure.core/defn
 no-operation
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-internal/send
   conn
   xcljb.gen.xproto-types/NoOperationRequest
   request)))

;;; Manually written.

(clojure.core/defn
 query-text-extents
 [conn font string]
 (xcljb.conn-internal/send
  conn
  xcljb.gen.xproto-types/QueryTextExtentsRequest
  {:string string, :font font}))

(clojure.core/defn
 configure-window
 [conn window value]
 (xcljb.conn-internal/send
  conn
  xcljb.gen.xproto-types/ConfigureWindowRequest
  {:value value, :window window}))
