;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xprint
 (:require xcljb.conn-ext xcljb.gen.xprint-types))

(def
 -XCLJB
 {:minor-version 0,
  :major-version 1,
  :header "xprint",
  :extension-multiword true,
  :extension-name "XPrint",
  :extension-xname "XpExtension"})

(def
 ATTR
 {:spooler-attr 7,
  :medium-attr 6,
  :server-attr 5,
  :printer-attr 4,
  :page-attr 3,
  :doc-attr 2,
  :job-attr 1})

(def
 DETAIL
 {:end-page-notify 6,
  :start-page-notify 5,
  :end-doc-notify 4,
  :start-doc-notify 3,
  :end-job-notify 2,
  :start-job-notify 1})

(def EV-MASK {:attribute-mask 2, :print-mask 1, :no-event-mask 0})

(def GET-DOC {:second-consumer 1, :finished 0})

(clojure.core/defn
 print-query-version
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintQueryVersionRequest
   request)))

(clojure.core/defn
 print-get-printer-list
 [conn printer-name-len locale-len printer-name locale]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:printer-name-len :locale-len :printer-name :locale]
    [printer-name-len locale-len printer-name locale])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetPrinterListRequest
   request)))

(clojure.core/defn
 print-rehash-printer-list
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintRehashPrinterListRequest
   request)))

(clojure.core/defn
 create-context
 [conn context-id printer-name-len locale-len printer-name locale]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-id :printer-name-len :locale-len :printer-name :locale]
    [context-id printer-name-len locale-len printer-name locale])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/CreateContextRequest
   request)))

(clojure.core/defn
 print-set-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintSetContextRequest
   request)))

(clojure.core/defn
 print-get-context
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetContextRequest
   request)))

(clojure.core/defn
 print-destroy-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintDestroyContextRequest
   request)))

(clojure.core/defn
 print-get-screen-of-context
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetScreenOfContextRequest
   request)))

(clojure.core/defn
 print-start-job
 [conn output-mode]
 (clojure.core/let
  [request (clojure.core/zipmap [:output-mode] [output-mode])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintStartJobRequest
   request)))

(clojure.core/defn
 print-end-job
 [conn cancel]
 (clojure.core/let
  [request (clojure.core/zipmap [:cancel] [cancel])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintEndJobRequest
   request)))

(clojure.core/defn
 print-start-doc
 [conn driver-mode]
 (clojure.core/let
  [request (clojure.core/zipmap [:driver-mode] [driver-mode])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintStartDocRequest
   request)))

(clojure.core/defn
 print-end-doc
 [conn cancel]
 (clojure.core/let
  [request (clojure.core/zipmap [:cancel] [cancel])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintEndDocRequest
   request)))

(clojure.core/defn
 print-put-document-data
 [conn drawable len-data len-fmt len-options data doc-format options]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable
     :len-data
     :len-fmt
     :len-options
     :data
     :doc-format
     :options]
    [drawable len-data len-fmt len-options data doc-format options])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintPutDocumentDataRequest
   request)))

(clojure.core/defn
 print-get-document-data
 [conn context max-bytes]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context :max-bytes] [context max-bytes])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetDocumentDataRequest
   request)))

(clojure.core/defn
 print-start-page
 [conn window]
 (clojure.core/let
  [request (clojure.core/zipmap [:window] [window])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintStartPageRequest
   request)))

(clojure.core/defn
 print-end-page
 [conn cancel]
 (clojure.core/let
  [request (clojure.core/zipmap [:cancel] [cancel])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintEndPageRequest
   request)))

(clojure.core/defn
 print-select-input
 [conn context event]
 (clojure.core/let
  [request (clojure.core/zipmap [:context :event] [context event])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintSelectInputRequest
   request)))

(clojure.core/defn
 print-input-selected
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintInputSelectedRequest
   request)))

(clojure.core/defn
 print-get-attributes
 [conn context pool]
 (clojure.core/let
  [request (clojure.core/zipmap [:context :pool] [context pool])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetAttributesRequest
   request)))

(clojure.core/defn
 print-get-one-attributes
 [conn context name-len pool name]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context :name-len :pool :name]
    [context name-len pool name])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetOneAttributesRequest
   request)))

(clojure.core/defn
 print-set-attributes
 [conn context string-len pool rule attributes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context :string-len :pool :rule :attributes]
    [context string-len pool rule attributes])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintSetAttributesRequest
   request)))

(clojure.core/defn
 print-get-page-dimensions
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetPageDimensionsRequest
   request)))

(clojure.core/defn
 print-query-screens
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintQueryScreensRequest
   request)))

(clojure.core/defn
 print-set-image-resolution
 [conn context image-resolution]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context :image-resolution]
    [context image-resolution])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintSetImageResolutionRequest
   request)))

(clojure.core/defn
 print-get-image-resolution
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "XpExtension"
   xcljb.gen.xprint-types/PrintGetImageResolutionRequest
   request)))

;;; Manually written.
