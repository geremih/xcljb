;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.glx
 (:require xcljb.conn-ext xcljb.gen.glx-types))

(def
 -XCLJB
 {:minor-version 3,
  :major-version 1,
  :header "glx",
  :extension-multiword false,
  :extension-name "Glx",
  :extension-xname "GLX"})

(def RM {:gl-select 7170, :gl-feedback 7169, :gl-render 7168})

(def
 GC
 {:gl-fog-bit 128,
  :gl-enable-bit 8192,
  :gl-all-attrib-bits 16777215,
  :gl-hint-bit 32768,
  :gl-accum-buffer-bit 512,
  :gl-list-bit 131072,
  :gl-transform-bit 4096,
  :gl-eval-bit 65536,
  :gl-color-buffer-bit 16384,
  :gl-polygon-bit 8,
  :gl-scissor-bit 524288,
  :gl-lighting-bit 64,
  :gl-polygon-stipple-bit 16,
  :gl-pixel-mode-bit 32,
  :gl-depth-buffer-bit 256,
  :gl-point-bit 2,
  :gl-line-bit 4,
  :gl-current-bit 1,
  :gl-viewport-bit 2048,
  :gl-texture-bit 262144,
  :gl-stencil-buffer-bit 1024})

(def PBCDT {:pbuffer 32794, :window 32793})

(def PBCET {:saved 32792, :damaged 32791})

(clojure.core/defn
 render
 [conn context-tag data]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :data] [context-tag data])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/RenderRequest
   request)))

(clojure.core/defn
 render-large
 [conn context-tag request-num request-total data-len data]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :request-num :request-total :data-len :data]
    [context-tag request-num request-total data-len data])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/RenderLargeRequest
   request)))

(clojure.core/defn
 create-context
 [conn context visual screen share-list is-direct]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context :visual :screen :share-list :is-direct]
    [context visual screen share-list is-direct])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreateContextRequest
   request)))

(clojure.core/defn
 destroy-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DestroyContextRequest
   request)))

(clojure.core/defn
 make-current
 [conn drawable context old-context-tag]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :context :old-context-tag]
    [drawable context old-context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/MakeCurrentRequest
   request)))

(clojure.core/defn
 is-direct
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/IsDirectRequest
   request)))

(clojure.core/defn
 query-version
 [conn major-version minor-version]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:major-version :minor-version]
    [major-version minor-version])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/QueryVersionRequest
   request)))

(clojure.core/defn
 wait-gl
 [conn context-tag]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag] [context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/WaitGLRequest
   request)))

(clojure.core/defn
 wait-x
 [conn context-tag]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag] [context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/WaitXRequest
   request)))

(clojure.core/defn
 copy-context
 [conn src dest mask src-context-tag]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:src :dest :mask :src-context-tag]
    [src dest mask src-context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CopyContextRequest
   request)))

(clojure.core/defn
 swap-buffers
 [conn context-tag drawable]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :drawable]
    [context-tag drawable])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/SwapBuffersRequest
   request)))

(clojure.core/defn
 use-x-font
 [conn context-tag font first count list-base]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :font :first :count :list-base]
    [context-tag font first count list-base])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/UseXFontRequest
   request)))

(clojure.core/defn
 create-glx-pixmap
 [conn screen visual pixmap glx-pixmap]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen :visual :pixmap :glx-pixmap]
    [screen visual pixmap glx-pixmap])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreateGLXPixmapRequest
   request)))

(clojure.core/defn
 get-visual-configs
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetVisualConfigsRequest
   request)))

(clojure.core/defn
 destroy-glx-pixmap
 [conn glx-pixmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:glx-pixmap] [glx-pixmap])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DestroyGLXPixmapRequest
   request)))

(clojure.core/defn
 vendor-private
 [conn vendor-code context-tag data]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:vendor-code :context-tag :data]
    [vendor-code context-tag data])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/VendorPrivateRequest
   request)))

(clojure.core/defn
 vendor-private-with-reply
 [conn vendor-code context-tag data]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:vendor-code :context-tag :data]
    [vendor-code context-tag data])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/VendorPrivateWithReplyRequest
   request)))

(clojure.core/defn
 query-extensions-string
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/QueryExtensionsStringRequest
   request)))

(clojure.core/defn
 query-server-string
 [conn screen name]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen :name] [screen name])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/QueryServerStringRequest
   request)))

(clojure.core/defn
 client-info
 [conn major-version minor-version str-len string]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:major-version :minor-version :str-len :string]
    [major-version minor-version str-len string])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/ClientInfoRequest
   request)))

(clojure.core/defn
 get-fb-configs
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetFBConfigsRequest
   request)))

(clojure.core/defn
 create-pixmap
 [conn screen fbconfig pixmap glx-pixmap num-attribs attribs]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen :fbconfig :pixmap :glx-pixmap :num-attribs :attribs]
    [screen fbconfig pixmap glx-pixmap num-attribs attribs])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreatePixmapRequest
   request)))

(clojure.core/defn
 destroy-pixmap
 [conn glx-pixmap]
 (clojure.core/let
  [request (clojure.core/zipmap [:glx-pixmap] [glx-pixmap])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DestroyPixmapRequest
   request)))

(clojure.core/defn
 create-new-context
 [conn context fbconfig screen render-type share-list is-direct]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context :fbconfig :screen :render-type :share-list :is-direct]
    [context fbconfig screen render-type share-list is-direct])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreateNewContextRequest
   request)))

(clojure.core/defn
 query-context
 [conn context]
 (clojure.core/let
  [request (clojure.core/zipmap [:context] [context])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/QueryContextRequest
   request)))

(clojure.core/defn
 make-context-current
 [conn old-context-tag drawable read-drawable context]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:old-context-tag :drawable :read-drawable :context]
    [old-context-tag drawable read-drawable context])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/MakeContextCurrentRequest
   request)))

(clojure.core/defn
 create-pbuffer
 [conn screen fbconfig pbuffer num-attribs attribs]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen :fbconfig :pbuffer :num-attribs :attribs]
    [screen fbconfig pbuffer num-attribs attribs])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreatePbufferRequest
   request)))

(clojure.core/defn
 destroy-pbuffer
 [conn pbuffer]
 (clojure.core/let
  [request (clojure.core/zipmap [:pbuffer] [pbuffer])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DestroyPbufferRequest
   request)))

(clojure.core/defn
 get-drawable-attributes
 [conn drawable]
 (clojure.core/let
  [request (clojure.core/zipmap [:drawable] [drawable])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetDrawableAttributesRequest
   request)))

(clojure.core/defn
 change-drawable-attributes
 [conn drawable num-attribs attribs]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:drawable :num-attribs :attribs]
    [drawable num-attribs attribs])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/ChangeDrawableAttributesRequest
   request)))

(clojure.core/defn
 create-window
 [conn screen fbconfig window glx-window num-attribs attribs]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen :fbconfig :window :glx-window :num-attribs :attribs]
    [screen fbconfig window glx-window num-attribs attribs])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreateWindowRequest
   request)))

(clojure.core/defn
 delete-window
 [conn glxwindow]
 (clojure.core/let
  [request (clojure.core/zipmap [:glxwindow] [glxwindow])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DeleteWindowRequest
   request)))

(clojure.core/defn
 set-client-info-arb
 [conn
  major-version
  minor-version
  num-versions
  gl-str-len
  glx-str-len
  gl-versions
  gl-extension-string
  glx-extension-string]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:major-version
     :minor-version
     :num-versions
     :gl-str-len
     :glx-str-len
     :gl-versions
     :gl-extension-string
     :glx-extension-string]
    [major-version
     minor-version
     num-versions
     gl-str-len
     glx-str-len
     gl-versions
     gl-extension-string
     glx-extension-string])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/SetClientInfoARBRequest
   request)))

(clojure.core/defn
 create-context-attribs-arb
 [conn
  context
  fbconfig
  screen
  share-list
  is-direct
  num-attribs
  attribs]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context
     :fbconfig
     :screen
     :share-list
     :is-direct
     :num-attribs
     :attribs]
    [context
     fbconfig
     screen
     share-list
     is-direct
     num-attribs
     attribs])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/CreateContextAttribsARBRequest
   request)))

(clojure.core/defn
 set-client-info2arb
 [conn
  major-version
  minor-version
  num-versions
  gl-str-len
  glx-str-len
  gl-versions
  gl-extension-string
  glx-extension-string]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:major-version
     :minor-version
     :num-versions
     :gl-str-len
     :glx-str-len
     :gl-versions
     :gl-extension-string
     :glx-extension-string]
    [major-version
     minor-version
     num-versions
     gl-str-len
     glx-str-len
     gl-versions
     gl-extension-string
     glx-extension-string])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/SetClientInfo2ARBRequest
   request)))

(clojure.core/defn
 new-list
 [conn context-tag list mode]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :list :mode]
    [context-tag list mode])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/NewListRequest
   request)))

(clojure.core/defn
 end-list
 [conn context-tag]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag] [context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/EndListRequest
   request)))

(clojure.core/defn
 delete-lists
 [conn context-tag list range]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :list :range]
    [context-tag list range])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DeleteListsRequest
   request)))

(clojure.core/defn
 gen-lists
 [conn context-tag range]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :range] [context-tag range])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GenListsRequest
   request)))

(clojure.core/defn
 feedback-buffer
 [conn context-tag size type]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :size :type]
    [context-tag size type])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/FeedbackBufferRequest
   request)))

(clojure.core/defn
 select-buffer
 [conn context-tag size]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :size] [context-tag size])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/SelectBufferRequest
   request)))

(clojure.core/defn
 render-mode
 [conn context-tag mode]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :mode] [context-tag mode])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/RenderModeRequest
   request)))

(clojure.core/defn
 finish
 [conn context-tag]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag] [context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/FinishRequest
   request)))

(clojure.core/defn
 pixel-storef
 [conn context-tag pname datum]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :pname :datum]
    [context-tag pname datum])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/PixelStorefRequest
   request)))

(clojure.core/defn
 pixel-storei
 [conn context-tag pname datum]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :pname :datum]
    [context-tag pname datum])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/PixelStoreiRequest
   request)))

(clojure.core/defn
 read-pixels
 [conn context-tag x y width height format type swap-bytes lsb-first]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag
     :x
     :y
     :width
     :height
     :format
     :type
     :swap-bytes
     :lsb-first]
    [context-tag x y width height format type swap-bytes lsb-first])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/ReadPixelsRequest
   request)))

(clojure.core/defn
 get-booleanv
 [conn context-tag pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :pname] [context-tag pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetBooleanvRequest
   request)))

(clojure.core/defn
 get-clip-plane
 [conn context-tag plane]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :plane] [context-tag plane])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetClipPlaneRequest
   request)))

(clojure.core/defn
 get-doublev
 [conn context-tag pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :pname] [context-tag pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetDoublevRequest
   request)))

(clojure.core/defn
 get-error
 [conn context-tag]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag] [context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetErrorRequest
   request)))

(clojure.core/defn
 get-floatv
 [conn context-tag pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :pname] [context-tag pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetFloatvRequest
   request)))

(clojure.core/defn
 get-integerv
 [conn context-tag pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :pname] [context-tag pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetIntegervRequest
   request)))

(clojure.core/defn
 get-lightfv
 [conn context-tag light pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :light :pname]
    [context-tag light pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetLightfvRequest
   request)))

(clojure.core/defn
 get-lightiv
 [conn context-tag light pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :light :pname]
    [context-tag light pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetLightivRequest
   request)))

(clojure.core/defn
 get-mapdv
 [conn context-tag target query]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :query]
    [context-tag target query])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMapdvRequest
   request)))

(clojure.core/defn
 get-mapfv
 [conn context-tag target query]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :query]
    [context-tag target query])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMapfvRequest
   request)))

(clojure.core/defn
 get-mapiv
 [conn context-tag target query]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :query]
    [context-tag target query])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMapivRequest
   request)))

(clojure.core/defn
 get-materialfv
 [conn context-tag face pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :face :pname]
    [context-tag face pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMaterialfvRequest
   request)))

(clojure.core/defn
 get-materialiv
 [conn context-tag face pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :face :pname]
    [context-tag face pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMaterialivRequest
   request)))

(clojure.core/defn
 get-pixel-mapfv
 [conn context-tag map]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag :map] [context-tag map])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetPixelMapfvRequest
   request)))

(clojure.core/defn
 get-pixel-mapuiv
 [conn context-tag map]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag :map] [context-tag map])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetPixelMapuivRequest
   request)))

(clojure.core/defn
 get-pixel-mapusv
 [conn context-tag map]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag :map] [context-tag map])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetPixelMapusvRequest
   request)))

(clojure.core/defn
 get-polygon-stipple
 [conn context-tag lsb-first]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :lsb-first]
    [context-tag lsb-first])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetPolygonStippleRequest
   request)))

(clojure.core/defn
 get-string
 [conn context-tag name]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :name] [context-tag name])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetStringRequest
   request)))

(clojure.core/defn
 get-tex-envfv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexEnvfvRequest
   request)))

(clojure.core/defn
 get-tex-enviv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexEnvivRequest
   request)))

(clojure.core/defn
 get-tex-gendv
 [conn context-tag coord pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :coord :pname]
    [context-tag coord pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexGendvRequest
   request)))

(clojure.core/defn
 get-tex-genfv
 [conn context-tag coord pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :coord :pname]
    [context-tag coord pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexGenfvRequest
   request)))

(clojure.core/defn
 get-tex-geniv
 [conn context-tag coord pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :coord :pname]
    [context-tag coord pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexGenivRequest
   request)))

(clojure.core/defn
 get-tex-image
 [conn context-tag target level format type swap-bytes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :level :format :type :swap-bytes]
    [context-tag target level format type swap-bytes])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexImageRequest
   request)))

(clojure.core/defn
 get-tex-parameterfv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexParameterfvRequest
   request)))

(clojure.core/defn
 get-tex-parameteriv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexParameterivRequest
   request)))

(clojure.core/defn
 get-tex-level-parameterfv
 [conn context-tag target level pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :level :pname]
    [context-tag target level pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexLevelParameterfvRequest
   request)))

(clojure.core/defn
 get-tex-level-parameteriv
 [conn context-tag target level pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :level :pname]
    [context-tag target level pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetTexLevelParameterivRequest
   request)))

(clojure.core/defn
 is-list
 [conn context-tag list]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :list] [context-tag list])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/IsListRequest
   request)))

(clojure.core/defn
 flush
 [conn context-tag]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag] [context-tag])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/FlushRequest
   request)))

(clojure.core/defn
 are-textures-resident
 [conn context-tag n textures]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :n :textures]
    [context-tag n textures])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/AreTexturesResidentRequest
   request)))

(clojure.core/defn
 delete-textures
 [conn context-tag n textures]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :n :textures]
    [context-tag n textures])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DeleteTexturesRequest
   request)))

(clojure.core/defn
 gen-textures
 [conn context-tag n]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag :n] [context-tag n])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GenTexturesRequest
   request)))

(clojure.core/defn
 is-texture
 [conn context-tag texture]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :texture] [context-tag texture])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/IsTextureRequest
   request)))

(clojure.core/defn
 get-color-table
 [conn context-tag target format type swap-bytes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :format :type :swap-bytes]
    [context-tag target format type swap-bytes])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetColorTableRequest
   request)))

(clojure.core/defn
 get-color-table-parameterfv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetColorTableParameterfvRequest
   request)))

(clojure.core/defn
 get-color-table-parameteriv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetColorTableParameterivRequest
   request)))

(clojure.core/defn
 get-convolution-filter
 [conn context-tag target format type swap-bytes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :format :type :swap-bytes]
    [context-tag target format type swap-bytes])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetConvolutionFilterRequest
   request)))

(clojure.core/defn
 get-convolution-parameterfv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetConvolutionParameterfvRequest
   request)))

(clojure.core/defn
 get-convolution-parameteriv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetConvolutionParameterivRequest
   request)))

(clojure.core/defn
 get-separable-filter
 [conn context-tag target format type swap-bytes]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :format :type :swap-bytes]
    [context-tag target format type swap-bytes])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetSeparableFilterRequest
   request)))

(clojure.core/defn
 get-histogram
 [conn context-tag target format type swap-bytes reset]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :format :type :swap-bytes :reset]
    [context-tag target format type swap-bytes reset])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetHistogramRequest
   request)))

(clojure.core/defn
 get-histogram-parameterfv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetHistogramParameterfvRequest
   request)))

(clojure.core/defn
 get-histogram-parameteriv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetHistogramParameterivRequest
   request)))

(clojure.core/defn
 get-minmax
 [conn context-tag target format type swap-bytes reset]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :format :type :swap-bytes :reset]
    [context-tag target format type swap-bytes reset])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMinmaxRequest
   request)))

(clojure.core/defn
 get-minmax-parameterfv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMinmaxParameterfvRequest
   request)))

(clojure.core/defn
 get-minmax-parameteriv
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetMinmaxParameterivRequest
   request)))

(clojure.core/defn
 get-compressed-tex-image-arb
 [conn context-tag target level]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :level]
    [context-tag target level])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetCompressedTexImageARBRequest
   request)))

(clojure.core/defn
 delete-queries-arb
 [conn context-tag n ids]
 (clojure.core/let
  [request
   (clojure.core/zipmap [:context-tag :n :ids] [context-tag n ids])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/DeleteQueriesARBRequest
   request)))

(clojure.core/defn
 gen-queries-arb
 [conn context-tag n]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag :n] [context-tag n])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GenQueriesARBRequest
   request)))

(clojure.core/defn
 is-query-arb
 [conn context-tag id]
 (clojure.core/let
  [request (clojure.core/zipmap [:context-tag :id] [context-tag id])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/IsQueryARBRequest
   request)))

(clojure.core/defn
 get-queryiv-arb
 [conn context-tag target pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :target :pname]
    [context-tag target pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetQueryivARBRequest
   request)))

(clojure.core/defn
 get-query-objectiv-arb
 [conn context-tag id pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :id :pname]
    [context-tag id pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetQueryObjectivARBRequest
   request)))

(clojure.core/defn
 get-query-objectuiv-arb
 [conn context-tag id pname]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:context-tag :id :pname]
    [context-tag id pname])]
  (xcljb.conn-ext/send
   conn
   "GLX"
   xcljb.gen.glx-types/GetQueryObjectuivARBRequest
   request)))

;;; Manually written.
