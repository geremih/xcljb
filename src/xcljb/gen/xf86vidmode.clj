;;;; This file is automatically generated. DO NOT MODIFY.

(clojure.core/ns
 xcljb.gen.xf86vidmode
 (:require xcljb.conn-ext xcljb.gen.xf86vidmode-types))

(def
 -XCLJB
 {:minor-version 2,
  :major-version 2,
  :header "xf86vidmode",
  :extension-multiword false,
  :extension-name "XF86VidMode",
  :extension-xname "XFree86-VidModeExtension"})

(def PERMISSION {:write 2, :read 1})

(def CLOCK-FLAG {:programable 1})

(def
 MODE-FLAG
 {:hskew 256,
  :broadcast 512,
  :positive-csync 64,
  :positive-hsync 1,
  :negative-vsync 8,
  :double-clock 2048,
  :negative-csync 128,
  :positive-vsync 4,
  :negative-hsync 2,
  :pixmux 1024,
  :composite-sync 32,
  :half-clock 4096,
  :interlace 16})

(clojure.core/defn
 query-version
 [conn]
 (clojure.core/let
  [request (clojure.core/zipmap [] [])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/QueryVersionRequest
   request)))

(clojure.core/defn
 get-mode-line
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetModeLineRequest
   request)))

(clojure.core/defn
 mod-mode-line
 [conn
  screen
  hdisplay
  hsyncstart
  hsyncend
  htotal
  hskew
  vdisplay
  vsyncstart
  vsyncend
  vtotal
  flags
  privsize
  private]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen
     :hdisplay
     :hsyncstart
     :hsyncend
     :htotal
     :hskew
     :vdisplay
     :vsyncstart
     :vsyncend
     :vtotal
     :flags
     :privsize
     :private]
    [screen
     hdisplay
     hsyncstart
     hsyncend
     htotal
     hskew
     vdisplay
     vsyncstart
     vsyncend
     vtotal
     flags
     privsize
     private])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/ModModeLineRequest
   request)))

(clojure.core/defn
 switch-mode
 [conn screen zoom]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen :zoom] [screen zoom])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/SwitchModeRequest
   request)))

(clojure.core/defn
 get-monitor
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetMonitorRequest
   request)))

(clojure.core/defn
 lock-mode-switch
 [conn screen lock]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen :lock] [screen lock])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/LockModeSwitchRequest
   request)))

(clojure.core/defn
 get-all-mode-lines
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetAllModeLinesRequest
   request)))

(clojure.core/defn
 add-mode-line
 [conn
  screen
  dotclock
  hdisplay
  hsyncstart
  hsyncend
  htotal
  hskew
  vdisplay
  vsyncstart
  vsyncend
  vtotal
  flags
  privsize
  after-dotclock
  after-hdisplay
  after-hsyncstart
  after-hsyncend
  after-htotal
  after-hskew
  after-vdisplay
  after-vsyncstart
  after-vsyncend
  after-vtotal
  after-flags
  private]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen
     :dotclock
     :hdisplay
     :hsyncstart
     :hsyncend
     :htotal
     :hskew
     :vdisplay
     :vsyncstart
     :vsyncend
     :vtotal
     :flags
     :privsize
     :after-dotclock
     :after-hdisplay
     :after-hsyncstart
     :after-hsyncend
     :after-htotal
     :after-hskew
     :after-vdisplay
     :after-vsyncstart
     :after-vsyncend
     :after-vtotal
     :after-flags
     :private]
    [screen
     dotclock
     hdisplay
     hsyncstart
     hsyncend
     htotal
     hskew
     vdisplay
     vsyncstart
     vsyncend
     vtotal
     flags
     privsize
     after-dotclock
     after-hdisplay
     after-hsyncstart
     after-hsyncend
     after-htotal
     after-hskew
     after-vdisplay
     after-vsyncstart
     after-vsyncend
     after-vtotal
     after-flags
     private])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/AddModeLineRequest
   request)))

(clojure.core/defn
 delete-mode-line
 [conn
  screen
  dotclock
  hdisplay
  hsyncstart
  hsyncend
  htotal
  hskew
  vdisplay
  vsyncstart
  vsyncend
  vtotal
  flags
  privsize
  private]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen
     :dotclock
     :hdisplay
     :hsyncstart
     :hsyncend
     :htotal
     :hskew
     :vdisplay
     :vsyncstart
     :vsyncend
     :vtotal
     :flags
     :privsize
     :private]
    [screen
     dotclock
     hdisplay
     hsyncstart
     hsyncend
     htotal
     hskew
     vdisplay
     vsyncstart
     vsyncend
     vtotal
     flags
     privsize
     private])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/DeleteModeLineRequest
   request)))

(clojure.core/defn
 validate-mode-line
 [conn
  screen
  dotclock
  hdisplay
  hsyncstart
  hsyncend
  htotal
  hskew
  vdisplay
  vsyncstart
  vsyncend
  vtotal
  flags
  privsize
  private]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen
     :dotclock
     :hdisplay
     :hsyncstart
     :hsyncend
     :htotal
     :hskew
     :vdisplay
     :vsyncstart
     :vsyncend
     :vtotal
     :flags
     :privsize
     :private]
    [screen
     dotclock
     hdisplay
     hsyncstart
     hsyncend
     htotal
     hskew
     vdisplay
     vsyncstart
     vsyncend
     vtotal
     flags
     privsize
     private])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/ValidateModeLineRequest
   request)))

(clojure.core/defn
 switch-to-mode
 [conn
  screen
  dotclock
  hdisplay
  hsyncstart
  hsyncend
  htotal
  hskew
  vdisplay
  vsyncstart
  vsyncend
  vtotal
  flags
  privsize
  private]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen
     :dotclock
     :hdisplay
     :hsyncstart
     :hsyncend
     :htotal
     :hskew
     :vdisplay
     :vsyncstart
     :vsyncend
     :vtotal
     :flags
     :privsize
     :private]
    [screen
     dotclock
     hdisplay
     hsyncstart
     hsyncend
     htotal
     hskew
     vdisplay
     vsyncstart
     vsyncend
     vtotal
     flags
     privsize
     private])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/SwitchToModeRequest
   request)))

(clojure.core/defn
 get-view-port
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetViewPortRequest
   request)))

(clojure.core/defn
 set-view-port
 [conn screen x y]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen :x :y] [screen x y])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/SetViewPortRequest
   request)))

(clojure.core/defn
 get-dot-clocks
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetDotClocksRequest
   request)))

(clojure.core/defn
 set-client-version
 [conn major minor]
 (clojure.core/let
  [request (clojure.core/zipmap [:major :minor] [major minor])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/SetClientVersionRequest
   request)))

(clojure.core/defn
 set-gamma
 [conn screen red green blue]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen :red :green :blue]
    [screen red green blue])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/SetGammaRequest
   request)))

(clojure.core/defn
 get-gamma
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetGammaRequest
   request)))

(clojure.core/defn
 get-gamma-ramp
 [conn screen size]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen :size] [screen size])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetGammaRampRequest
   request)))

(clojure.core/defn
 set-gamma-ramp
 [conn screen size red green blue]
 (clojure.core/let
  [request
   (clojure.core/zipmap
    [:screen :size :red :green :blue]
    [screen size red green blue])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/SetGammaRampRequest
   request)))

(clojure.core/defn
 get-gamma-ramp-size
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetGammaRampSizeRequest
   request)))

(clojure.core/defn
 get-permissions
 [conn screen]
 (clojure.core/let
  [request (clojure.core/zipmap [:screen] [screen])]
  (xcljb.conn-ext/send
   conn
   "XFree86-VidModeExtension"
   xcljb.gen.xf86vidmode-types/GetPermissionsRequest
   request)))

;;; Manually written.
