(ns xcljb.xmlgen.gen
  (:require [clojure.pprint :as pp]
            [clojure.data.xml :as xml]
            [xcljb.xmlgen.ir :as ir]
            [xcljb.xmlgen.manual :as manual]
            [xcljb.xmlgen.xml2ir :as xml2ir]))

(defn- gen-enum [enum]
  (let [s-name (-> enum (:name) (ir/beautify :enum) (symbol))
        content (for [item (:content enum)]
                  [(-> item (:name) (ir/beautify :enum-item) (keyword))
                   (:value item)])]
    `(def ~s-name ~(reduce conj {} content))))

(defn- gen-xcb [xcb]
  `(def ~(symbol "-XCLJB") {:header ~(:header xcb)
                            :extension-name ~(:extension-name xcb)
                            :extension-xname ~(:extension-xname xcb)
                            :extension-multiword ~(:extension-multiword xcb)
                            :major-version ~(:major-version xcb)
                            :minor-version ~(:minor-version xcb)}))

(defn- write-header-comment [writer]
  (.write writer ";;;; This file is automatically generated. DO NOT MODIFY.\n"))

(defn- write-manual-comment [writer]
  (.write writer "\n;;; Manually written.\n"))

(defn -main [& args]
  (let [root (xml/parse (java.io.BufferedReader. *in*))
        [xcb
         imports
         types
         enums
         requests
         replies
         events
         errors] (xml2ir/xml->ir root)
        file-prefix (str "src/xcljb/gen/" (:header xcb))
        ns-name (ir/beautify (:header xcb) :ns-name)]
    (with-open [wrtr (clojure.java.io/writer (str file-prefix ".clj"))]
      (write-header-comment wrtr)

      (.write wrtr "\n")
      (pp/pprint
       `(ns ~(symbol (str "xcljb.gen." ns-name))
          (:require ~(if (= (:header xcb) "xproto")
                       'xcljb.conn-internal
                       'xcljb.conn-ext)
                    ~(symbol (str "xcljb.gen." ns-name "-types"))))
       wrtr)

      (.write wrtr "\n")
      (pp/pprint (gen-xcb xcb) wrtr)

      (doseq [enum (vals enums)]
        (.write wrtr "\n")
        (pp/pprint (gen-enum enum) wrtr))

      (doseq [request requests]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-request-fn request) wrtr))

      ;; Manually written requests.
      (write-manual-comment wrtr)
      (doseq [request (get-in manual/MANUAL [(:header xcb) :request])]
        (.write wrtr "\n")
        (pp/pprint (manual/gen-request-fn request) wrtr)))

    (with-open [wrtr (clojure.java.io/writer (str file-prefix "_types.clj"))]
      (write-header-comment wrtr)

      (.write wrtr "\n")
      (pp/pprint
       `(ns ~(symbol (str "xcljb.gen." ns-name "-types"))
          (:require [~'xcljb ~'gen-common]
                    ~(if (empty? imports)
                       (symbol "")
                       `[~'xcljb.gen ~@(map #(symbol (str % "-types")) imports)])))
       wrtr)

      (doseq [type types]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-type type) wrtr))

      (doseq [request requests]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-type request) wrtr))

      (doseq [reply replies]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-type reply) wrtr))

      (doseq [event events]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-type event) wrtr))

      (doseq [error errors]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-type error) wrtr))

      ;; Manually written types.
      (write-manual-comment wrtr)
      (doseq [request (get-in manual/MANUAL [(:header xcb) :request])]
        (.write wrtr "\n")
        (pp/pprint (manual/gen-request-type request) wrtr))
      (doseq [event (get-in manual/MANUAL [(:header xcb) :event])]
        (.write wrtr "\n")
        (pp/pprint (manual/gen-event-type event) wrtr)))

    (with-open [wrtr (clojure.java.io/writer (str file-prefix "_internal.clj"))]
      (write-header-comment wrtr)

      (.write wrtr "\n")
      (pp/pprint
       `(ns ~(symbol (str "xcljb.gen." ns-name "-internal"))
          (:require [~'xcljb ~'common ~'gen-common]
                    [~'xcljb.gen ~(symbol (str (:header xcb) "-types"))]))
       wrtr)

      (doseq [reply replies]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-read-fn reply) wrtr))

      (doseq [event events]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-read-fn event) wrtr))

      (doseq [error errors]
        (.write wrtr "\n")
        (pp/pprint (ir/gen-read-fn error) wrtr))

      ;; Manually written read functions.
      (write-manual-comment wrtr)
      (doseq [event (get-in manual/MANUAL [(:header xcb) :event])]
        (.write wrtr "\n")
        (pp/pprint (manual/gen-event-fn event) wrtr)))))
